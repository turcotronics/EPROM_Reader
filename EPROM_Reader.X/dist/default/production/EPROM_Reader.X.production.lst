

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu May 22 17:57:50 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0086                     	;# 
   159  0087                     	;# 
   160  0088                     	;# 
   161  0089                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181                           
   182                           	psect	idataBANK0
   183  0299                     __pidataBANK0:
   184                           
   185                           ;initializer for _TxBuff
   186  0299  3445               	retlw	69
   187  029A  3452               	retlw	82
   188  029B  3465               	retlw	101
   189  029C  3461               	retlw	97
   190  029D  3464               	retlw	100
   191  029E  3465               	retlw	101
   192  029F  3472               	retlw	114
   193  02A0  3400               	retlw	0
   194                           
   195                           ;initializer for _MaxAddr
   196  02A1  34FF               	retlw	255
   197  02A2  347F               	retlw	127
   198  02A3  3400               	retlw	0
   199  02A4  3400               	retlw	0
   200  001A                     _RCREG	set	26
   201  0019                     _TXREG	set	25
   202  0018                     _RCSTA	set	24
   203  0009                     _PORTE	set	9
   204  0008                     _PORTD	set	8
   205  0007                     _PORTC	set	7
   206  0006                     _PORTB	set	6
   207  0005                     _PORTA	set	5
   208  0065                     _RCIF	set	101
   209  0048                     _RE0	set	72
   210  003A                     _RC2	set	58
   211  0039                     _RC1	set	57
   212  0038                     _RC0	set	56
   213  0035                     _RB5	set	53
   214  0034                     _RB4	set	52
   215  0032                     _RB2	set	50
   216  0031                     _RB1	set	49
   217  0030                     _RB0	set	48
   218  003D                     _RC5	set	61
   219  004A                     _RE2	set	74
   220  0099                     _SPBRG	set	153
   221  0098                     _TXSTA	set	152
   222  0089                     _TRISE	set	137
   223  0088                     _TRISD	set	136
   224  0087                     _TRISC	set	135
   225  0086                     _TRISB	set	134
   226  0085                     _TRISA	set	133
   227  04C1                     _TRMT	set	1217
   228  040B                     _PSA	set	1035
   229  0408                     _PS0	set	1032
   230  0409                     _PS1	set	1033
   231  040A                     _PS2	set	1034
   232                           
   233                           	psect	cinit
   234  07E6                     start_initialization:	
   235                           ; #config settings
   236                           
   237  07E6                     __initialization:
   238                           
   239                           ; Initialize objects allocated to BANK0
   240  07E6  1383               	bcf	3,7	;select IRP bank0
   241  07E7  3050               	movlw	low (__pdataBANK0+12)
   242  07E8  00FD               	movwf	btemp+-1
   243  07E9  3002               	movlw	high __pidataBANK0
   244  07EA  00FE               	movwf	btemp
   245  07EB  3099               	movlw	low __pidataBANK0
   246  07EC  00FF               	movwf	btemp+1
   247  07ED  3044               	movlw	low __pdataBANK0
   248  07EE  0084               	movwf	4
   249  07EF  120A  118A  22C9  120A  118A  	fcall	init_ram0
   250                           
   251                           ; Clear objects allocated to BANK0
   252  07F4  3034               	movlw	low __pbssBANK0
   253  07F5  0084               	movwf	4
   254  07F6  3044               	movlw	low (__pbssBANK0+16)
   255  07F7  120A  118A  227D  120A  118A  	fcall	clear_ram0
   256  07FC                     end_of_initialization:	
   257                           ;End of C runtime variable initialization code
   258                           
   259  07FC                     __end_of__initialization:
   260  07FC  0183               	clrf	3
   261  07FD  120A  118A  2CCE   	ljmp	_main	;jump to C main() function
   262                           
   263                           	psect	bssBANK0
   264  0034                     __pbssBANK0:
   265  0034                     _i:
   266  0034                     	ds	4
   267  0038                     _MinAddr:
   268  0038                     	ds	4
   269  003C                     _RxBuff:
   270  003C                     	ds	8
   271                           
   272                           	psect	dataBANK0
   273  0044                     __pdataBANK0:
   274  0044                     _TxBuff:
   275  0044                     	ds	8
   276  004C                     _MaxAddr:
   277  004C                     	ds	4
   278                           
   279                           	psect	inittext
   280  02C5                     init_fetch0:	
   281                           ;	Called with low address in FSR and high address in W
   282                           
   283  02C5  087E               	movf	btemp,w
   284  02C6  008A               	movwf	10
   285  02C7  087F               	movf	btemp+1,w
   286  02C8  0082               	movwf	2
   287  02C9                     init_ram0:	
   288                           ;Called with:
   289                           ;	high address of idata address in btemp 
   290                           ;	low address of idata address in btemp+1 
   291                           ;	low address of data in FSR
   292                           ;	high address + 1 of data in btemp-1
   293                           
   294  02C9  120A  118A  22C5  120A  118A  	fcall	init_fetch0
   295  02CE  0080               	movwf	0
   296  02CF  0A84               	incf	4,f
   297  02D0  0804               	movf	4,w
   298  02D1  067D               	xorwf	btemp+-1,w
   299  02D2  1903               	btfsc	3,2
   300  02D3  3400               	retlw	0
   301  02D4  0AFF               	incf	btemp+1,f
   302  02D5  1903               	btfsc	3,2
   303  02D6  0AFE               	incf	btemp,f
   304  02D7  2AC9               	goto	init_ram0
   305                           
   306                           	psect	clrtext
   307  027D                     clear_ram0:	
   308                           ;	Called with FSR containing the base address, and
   309                           ;	W with the last address+1
   310                           
   311  027D  0064               	clrwdt	;clear the watchdog before getting into this loop
   312  027E                     clrloop0:
   313  027E  0180               	clrf	0	;clear RAM location pointed to by FSR
   314  027F  0A84               	incf	4,f	;increment pointer
   315  0280  0604               	xorwf	4,w	;XOR with final address
   316  0281  1903               	btfsc	3,2	;have we reached the end yet?
   317  0282  3400               	retlw	0	;all done for this memory range, return
   318  0283  0604               	xorwf	4,w	;XOR again to restore value
   319  0284  2A7E               	goto	clrloop0	;do the next byte
   320                           
   321                           	psect	cstackCOMMON
   322  0070                     __pcstackCOMMON:
   323  0070                     ?_isdigit:
   324  0070                     ?_flushRx:	
   325                           ; 1 bit 
   326                           
   327  0070                     ??_flushRx:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_getString:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_cleanRx:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ??_cleanRx:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_putch:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ??_putch:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ??_isdigit:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_main:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_getch:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ??_getch:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?___lmul:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?___aldiv:	
   361                           ; 4 bytes @ 0x0
   362                           
   363  0070                     putch@data:	
   364                           ; 4 bytes @ 0x0
   365                           
   366  0070                     _isdigit$566:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     cleanRx@i:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     getString@length:	
   373                           ; 2 bytes @ 0x0
   374                           
   375  0070                     ___lmul@multiplier:	
   376                           ; 2 bytes @ 0x0
   377                           
   378  0070                     ___aldiv@divisor:	
   379                           ; 4 bytes @ 0x0
   380                           
   381                           
   382                           ; 4 bytes @ 0x0
   383  0070                     	ds	1
   384  0071                     isdigit@c:
   385                           
   386                           ; 1 bytes @ 0x1
   387  0071                     	ds	1
   388  0072                     ??_getString:
   389                           
   390                           ; 1 bytes @ 0x2
   391  0072                     	ds	2
   392  0074                     getString@input:
   393  0074                     ___lmul@multiplicand:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     ___aldiv@dividend:	
   397                           ; 4 bytes @ 0x4
   398                           
   399                           
   400                           ; 4 bytes @ 0x4
   401  0074                     	ds	1
   402  0075                     getString@i:
   403                           
   404                           ; 2 bytes @ 0x5
   405  0075                     	ds	3
   406  0078                     ??___lmul:
   407  0078                     ??___aldiv:	
   408                           ; 1 bytes @ 0x8
   409                           
   410                           
   411                           ; 1 bytes @ 0x8
   412  0078                     	ds	1
   413  0079                     ??___set_baud_rate:
   414  0079                     ___lmul@product:	
   415                           ; 1 bytes @ 0x9
   416                           
   417                           
   418                           ; 4 bytes @ 0x9
   419  0079                     	ds	4
   420                           
   421                           	psect	cstackBANK0
   422  0020                     __pcstackBANK0:
   423  0020                     ?_atol:
   424  0020                     ___aldiv@counter:	
   425                           ; 4 bytes @ 0x0
   426                           
   427                           
   428                           ; 1 bytes @ 0x0
   429  0020                     	ds	1
   430  0021                     ___aldiv@sign:
   431                           
   432                           ; 1 bytes @ 0x1
   433  0021                     	ds	1
   434  0022                     ___aldiv@quotient:
   435                           
   436                           ; 4 bytes @ 0x2
   437  0022                     	ds	2
   438  0024                     ??_atol:
   439                           
   440                           ; 1 bytes @ 0x4
   441  0024                     	ds	2
   442  0026                     ?___set_baud_rate:
   443  0026                     ___set_baud_rate@baud_rate:	
   444                           ; 1 bytes @ 0x6
   445                           
   446                           
   447                           ; 4 bytes @ 0x6
   448  0026                     	ds	2
   449  0028                     atol@sign:
   450                           
   451                           ; 1 bytes @ 0x8
   452  0028                     	ds	1
   453  0029                     atol@a:
   454                           
   455                           ; 4 bytes @ 0x9
   456  0029                     	ds	4
   457  002D                     atol@s:
   458                           
   459                           ; 1 bytes @ 0xD
   460  002D                     	ds	1
   461  002E                     atol@c:
   462                           
   463                           ; 1 bytes @ 0xE
   464  002E                     	ds	1
   465  002F                     ??_main:
   466                           
   467                           ; 1 bytes @ 0xF
   468  002F                     	ds	5
   469                           
   470                           	psect	maintext
   471  04CE                     __pmaintext:	
   472 ;;
   473 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   474 ;;
   475 ;; *************** function _main *****************
   476 ;; Defined at:
   477 ;;		line 51 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   486 ;; Tracked objects:
   487 ;;		On entry : B00/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   491 ;;      Params:         0       0       0       0       0
   492 ;;      Locals:         0       0       0       0       0
   493 ;;      Temps:          0       5       0       0       0
   494 ;;      Totals:         0       5       0       0       0
   495 ;;Total ram usage:        5 bytes
   496 ;; Hardware stack levels required when called: 2
   497 ;; This function calls:
   498 ;;		___set_baud_rate
   499 ;;		_atol
   500 ;;		_cleanRx
   501 ;;		_flushRx
   502 ;;		_getString
   503 ;;		_putch
   504 ;; This function is called by:
   505 ;;		Startup code after reset
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509  04CE                     _main:	
   510                           ;psect for function _main
   511                           
   512  04CE                     l1168:	
   513                           ;incstack = 0
   514                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   515                           
   516                           
   517                           ;main.c: 53:     PORTA=0;
   518  04CE  1283               	bcf	3,5	;RP0=0, select bank0
   519  04CF  1303               	bcf	3,6	;RP1=0, select bank0
   520  04D0  0185               	clrf	5	;volatile
   521                           
   522                           ;main.c: 54:     TRISA=0x00;
   523  04D1  1683               	bsf	3,5	;RP0=1, select bank1
   524  04D2  1303               	bcf	3,6	;RP1=0, select bank1
   525  04D3  0185               	clrf	5	;volatile
   526                           
   527                           ;main.c: 55:     PORTB=0;
   528  04D4  1283               	bcf	3,5	;RP0=0, select bank0
   529  04D5  1303               	bcf	3,6	;RP1=0, select bank0
   530  04D6  0186               	clrf	6	;volatile
   531                           
   532                           ;main.c: 56:     TRISB=0x00;
   533  04D7  1683               	bsf	3,5	;RP0=1, select bank1
   534  04D8  1303               	bcf	3,6	;RP1=0, select bank1
   535  04D9  0186               	clrf	6	;volatile
   536                           
   537                           ;main.c: 57:     PORTC=0;
   538  04DA  1283               	bcf	3,5	;RP0=0, select bank0
   539  04DB  1303               	bcf	3,6	;RP1=0, select bank0
   540  04DC  0187               	clrf	7	;volatile
   541  04DD                     l1170:
   542                           
   543                           ;main.c: 58:     TRISC=0x90;
   544  04DD  3090               	movlw	144
   545  04DE  1683               	bsf	3,5	;RP0=1, select bank1
   546  04DF  1303               	bcf	3,6	;RP1=0, select bank1
   547  04E0  0087               	movwf	7	;volatile
   548  04E1                     l1172:
   549                           
   550                           ;main.c: 59:     PORTD=0;
   551  04E1  1283               	bcf	3,5	;RP0=0, select bank0
   552  04E2  1303               	bcf	3,6	;RP1=0, select bank0
   553  04E3  0188               	clrf	8	;volatile
   554                           
   555                           ;main.c: 60:     TRISD=0xFF;
   556  04E4  30FF               	movlw	255
   557  04E5  1683               	bsf	3,5	;RP0=1, select bank1
   558  04E6  1303               	bcf	3,6	;RP1=0, select bank1
   559  04E7  0088               	movwf	8	;volatile
   560  04E8                     l1174:
   561                           
   562                           ;main.c: 61:     PORTE=0;
   563  04E8  1283               	bcf	3,5	;RP0=0, select bank0
   564  04E9  1303               	bcf	3,6	;RP1=0, select bank0
   565  04EA  0189               	clrf	9	;volatile
   566  04EB                     l1176:
   567                           
   568                           ;main.c: 62:     TRISE=0x00;
   569  04EB  1683               	bsf	3,5	;RP0=1, select bank1
   570  04EC  1303               	bcf	3,6	;RP1=0, select bank1
   571  04ED  0189               	clrf	9	;volatile
   572  04EE                     l1178:
   573                           
   574                           ;main.c: 65:     __set_baud_rate(115200);
   575  04EE  3000               	movlw	0
   576  04EF  1283               	bcf	3,5	;RP0=0, select bank0
   577  04F0  1303               	bcf	3,6	;RP1=0, select bank0
   578  04F1  00A9               	movwf	___set_baud_rate@baud_rate+3
   579  04F2  3001               	movlw	1
   580  04F3  00A8               	movwf	___set_baud_rate@baud_rate+2
   581  04F4  30C2               	movlw	194
   582  04F5  00A7               	movwf	___set_baud_rate@baud_rate+1
   583  04F6  3000               	movlw	0
   584  04F7  00A6               	movwf	___set_baud_rate@baud_rate
   585  04F8  120A  118A  22D8  120A  118A  	fcall	___set_baud_rate
   586  04FD                     l1180:
   587                           
   588                           ;main.c: 66:     TXSTA = 0b00100100;
   589  04FD  3024               	movlw	36
   590  04FE  1683               	bsf	3,5	;RP0=1, select bank1
   591  04FF  1303               	bcf	3,6	;RP1=0, select bank1
   592  0500  0098               	movwf	24	;volatile
   593  0501                     l1182:
   594                           
   595                           ;main.c: 67:     RCSTA = 0b10010000;
   596  0501  3090               	movlw	144
   597  0502  1283               	bcf	3,5	;RP0=0, select bank0
   598  0503  1303               	bcf	3,6	;RP1=0, select bank0
   599  0504  0098               	movwf	24	;volatile
   600  0505                     l1184:
   601                           
   602                           ;main.c: 75:     PS2=0;PS1=1;PS0=1;
   603  0505  1683               	bsf	3,5	;RP0=1, select bank1
   604  0506  1303               	bcf	3,6	;RP1=0, select bank1
   605  0507  1101               	bcf	1,2	;volatile
   606  0508                     l1186:
   607  0508  1481               	bsf	1,1	;volatile
   608  0509                     l1188:
   609  0509  1401               	bsf	1,0	;volatile
   610  050A                     l1190:
   611                           
   612                           ;main.c: 76:     PSA=1;
   613  050A  1581               	bsf	1,3	;volatile
   614  050B                     l93:	
   615                           ;main.c: 78:     while(1)
   616                           
   617  050B  0064               	clrwdt	;# 
   618  050C                     l1192:
   619                           
   620                           ;main.c: 81:         flushRx();
   621  050C  120A  118A  2285  120A  118A  	fcall	_flushRx
   622  0511                     l1194:
   623                           
   624                           ;main.c: 82:         getString(RxBuff, 8);
   625  0511  3008               	movlw	8
   626  0512  00F0               	movwf	getString@length
   627  0513  3000               	movlw	0
   628  0514  00F1               	movwf	getString@length+1
   629  0515  303C               	movlw	(low (_RxBuff| 0))& (0+255)
   630  0516  120A  118A  2318  120A  118A  	fcall	_getString
   631  051B                     l1196:
   632                           
   633                           ;main.c: 83:         cleanRx();
   634  051B  120A  118A  22F4  120A  118A  	fcall	_cleanRx
   635  0520                     l1198:
   636                           
   637                           ;main.c: 84:         if(RxBuff[0]=='R')
   638  0520  3052               	movlw	82
   639  0521  1283               	bcf	3,5	;RP0=0, select bank0
   640  0522  1303               	bcf	3,6	;RP1=0, select bank0
   641  0523  063C               	xorwf	_RxBuff,w
   642  0524  1D03               	btfss	3,2
   643  0525  2D27               	goto	u1241
   644  0526  2D28               	goto	u1240
   645  0527                     u1241:
   646  0527  2E5E               	goto	l1232
   647  0528                     u1240:
   648  0528                     l1200:
   649                           
   650                           ;main.c: 85:         {;main.c: 86:             RE2=0;
   651  0528  1109               	bcf	9,2	;volatile
   652                           
   653                           ;main.c: 87:             RC5=0;
   654  0529  1287               	bcf	7,5	;volatile
   655  052A                     l1202:
   656                           
   657                           ;main.c: 88:             for(i=MinAddr; i<=MaxAddr; i++)
   658  052A  083B               	movf	_MinAddr+3,w
   659  052B  00B7               	movwf	_i+3
   660  052C  083A               	movf	_MinAddr+2,w
   661  052D  00B6               	movwf	_i+2
   662  052E  0839               	movf	_MinAddr+1,w
   663  052F  00B5               	movwf	_i+1
   664  0530  0838               	movf	_MinAddr,w
   665  0531  00B4               	movwf	_i
   666  0532  2E46               	goto	l1230
   667  0533                     l1204:
   668                           
   669                           ;main.c: 89:             {;main.c: 90:              PORTA=i&0x3F;
   670  0533  0834               	movf	_i,w
   671  0534  393F               	andlw	63
   672  0535  0085               	movwf	5	;volatile
   673  0536                     l1206:
   674                           
   675                           ;main.c: 91:              RB0=(__bit)((i>>6)&0x0001);
   676  0536  0834               	movf	_i,w
   677  0537  00AF               	movwf	??_main
   678  0538  0835               	movf	_i+1,w
   679  0539  00B0               	movwf	??_main+1
   680  053A  0836               	movf	_i+2,w
   681  053B  00B1               	movwf	??_main+2
   682  053C  0837               	movf	_i+3,w
   683  053D  00B2               	movwf	??_main+3
   684  053E  3006               	movlw	6
   685  053F  00B3               	movwf	??_main+4
   686  0540                     u1255:
   687  0540  0D32               	rlf	??_main+3,w
   688  0541  0CB2               	rrf	??_main+3,f
   689  0542  0CB1               	rrf	??_main+2,f
   690  0543  0CB0               	rrf	??_main+1,f
   691  0544  0CAF               	rrf	??_main,f
   692  0545                     u1250:
   693  0545  0BB3               	decfsz	??_main+4,f
   694  0546  2D40               	goto	u1255
   695  0547  182F               	btfsc	??_main,0
   696  0548  2D4A               	goto	u1261
   697  0549  2D4E               	goto	u1260
   698  054A                     u1261:
   699  054A  1283               	bcf	3,5	;RP0=0, select bank0
   700  054B  1303               	bcf	3,6	;RP1=0, select bank0
   701  054C  1406               	bsf	6,0	;volatile
   702  054D  2D51               	goto	u1274
   703  054E                     u1260:
   704  054E  1283               	bcf	3,5	;RP0=0, select bank0
   705  054F  1303               	bcf	3,6	;RP1=0, select bank0
   706  0550  1006               	bcf	6,0	;volatile
   707  0551                     u1274:
   708  0551                     l1208:
   709                           
   710                           ;main.c: 92:              RB1=(__bit)((i>>7)&0x0001);
   711  0551  0834               	movf	_i,w
   712  0552  00AF               	movwf	??_main
   713  0553  0835               	movf	_i+1,w
   714  0554  00B0               	movwf	??_main+1
   715  0555  0836               	movf	_i+2,w
   716  0556  00B1               	movwf	??_main+2
   717  0557  0837               	movf	_i+3,w
   718  0558  00B2               	movwf	??_main+3
   719  0559  3007               	movlw	7
   720  055A  00B3               	movwf	??_main+4
   721  055B                     u1285:
   722  055B  0D32               	rlf	??_main+3,w
   723  055C  0CB2               	rrf	??_main+3,f
   724  055D  0CB1               	rrf	??_main+2,f
   725  055E  0CB0               	rrf	??_main+1,f
   726  055F  0CAF               	rrf	??_main,f
   727  0560                     u1280:
   728  0560  0BB3               	decfsz	??_main+4,f
   729  0561  2D5B               	goto	u1285
   730  0562  182F               	btfsc	??_main,0
   731  0563  2D65               	goto	u1291
   732  0564  2D69               	goto	u1290
   733  0565                     u1291:
   734  0565  1283               	bcf	3,5	;RP0=0, select bank0
   735  0566  1303               	bcf	3,6	;RP1=0, select bank0
   736  0567  1486               	bsf	6,1	;volatile
   737  0568  2D6C               	goto	u1304
   738  0569                     u1290:
   739  0569  1283               	bcf	3,5	;RP0=0, select bank0
   740  056A  1303               	bcf	3,6	;RP1=0, select bank0
   741  056B  1086               	bcf	6,1	;volatile
   742  056C                     u1304:
   743  056C                     l1210:
   744                           
   745                           ;main.c: 93:              RB2=(__bit)((i>>8)&0x0001);
   746  056C  0834               	movf	_i,w
   747  056D  00AF               	movwf	??_main
   748  056E  0835               	movf	_i+1,w
   749  056F  00B0               	movwf	??_main+1
   750  0570  0836               	movf	_i+2,w
   751  0571  00B1               	movwf	??_main+2
   752  0572  0837               	movf	_i+3,w
   753  0573  00B2               	movwf	??_main+3
   754  0574  3008               	movlw	8
   755  0575  00B3               	movwf	??_main+4
   756  0576                     u1315:
   757  0576  0D32               	rlf	??_main+3,w
   758  0577  0CB2               	rrf	??_main+3,f
   759  0578  0CB1               	rrf	??_main+2,f
   760  0579  0CB0               	rrf	??_main+1,f
   761  057A  0CAF               	rrf	??_main,f
   762  057B                     u1310:
   763  057B  0BB3               	decfsz	??_main+4,f
   764  057C  2D76               	goto	u1315
   765  057D  182F               	btfsc	??_main,0
   766  057E  2D80               	goto	u1321
   767  057F  2D84               	goto	u1320
   768  0580                     u1321:
   769  0580  1283               	bcf	3,5	;RP0=0, select bank0
   770  0581  1303               	bcf	3,6	;RP1=0, select bank0
   771  0582  1506               	bsf	6,2	;volatile
   772  0583  2D87               	goto	u1334
   773  0584                     u1320:
   774  0584  1283               	bcf	3,5	;RP0=0, select bank0
   775  0585  1303               	bcf	3,6	;RP1=0, select bank0
   776  0586  1106               	bcf	6,2	;volatile
   777  0587                     u1334:
   778  0587                     l1212:
   779                           
   780                           ;main.c: 94:              RB4=(__bit)((i>>9)&0x0001);
   781  0587  0834               	movf	_i,w
   782  0588  00AF               	movwf	??_main
   783  0589  0835               	movf	_i+1,w
   784  058A  00B0               	movwf	??_main+1
   785  058B  0836               	movf	_i+2,w
   786  058C  00B1               	movwf	??_main+2
   787  058D  0837               	movf	_i+3,w
   788  058E  00B2               	movwf	??_main+3
   789  058F  3009               	movlw	9
   790  0590  00B3               	movwf	??_main+4
   791  0591                     u1345:
   792  0591  0D32               	rlf	??_main+3,w
   793  0592  0CB2               	rrf	??_main+3,f
   794  0593  0CB1               	rrf	??_main+2,f
   795  0594  0CB0               	rrf	??_main+1,f
   796  0595  0CAF               	rrf	??_main,f
   797  0596                     u1340:
   798  0596  0BB3               	decfsz	??_main+4,f
   799  0597  2D91               	goto	u1345
   800  0598  182F               	btfsc	??_main,0
   801  0599  2D9B               	goto	u1351
   802  059A  2D9F               	goto	u1350
   803  059B                     u1351:
   804  059B  1283               	bcf	3,5	;RP0=0, select bank0
   805  059C  1303               	bcf	3,6	;RP1=0, select bank0
   806  059D  1606               	bsf	6,4	;volatile
   807  059E  2DA2               	goto	u1364
   808  059F                     u1350:
   809  059F  1283               	bcf	3,5	;RP0=0, select bank0
   810  05A0  1303               	bcf	3,6	;RP1=0, select bank0
   811  05A1  1206               	bcf	6,4	;volatile
   812  05A2                     u1364:
   813  05A2                     l1214:
   814                           
   815                           ;main.c: 95:              RB5=(__bit)((i>>10)&0x0001);
   816  05A2  0834               	movf	_i,w
   817  05A3  00AF               	movwf	??_main
   818  05A4  0835               	movf	_i+1,w
   819  05A5  00B0               	movwf	??_main+1
   820  05A6  0836               	movf	_i+2,w
   821  05A7  00B1               	movwf	??_main+2
   822  05A8  0837               	movf	_i+3,w
   823  05A9  00B2               	movwf	??_main+3
   824  05AA  300A               	movlw	10
   825  05AB  00B3               	movwf	??_main+4
   826  05AC                     u1375:
   827  05AC  0D32               	rlf	??_main+3,w
   828  05AD  0CB2               	rrf	??_main+3,f
   829  05AE  0CB1               	rrf	??_main+2,f
   830  05AF  0CB0               	rrf	??_main+1,f
   831  05B0  0CAF               	rrf	??_main,f
   832  05B1                     u1370:
   833  05B1  0BB3               	decfsz	??_main+4,f
   834  05B2  2DAC               	goto	u1375
   835  05B3  182F               	btfsc	??_main,0
   836  05B4  2DB6               	goto	u1381
   837  05B5  2DBA               	goto	u1380
   838  05B6                     u1381:
   839  05B6  1283               	bcf	3,5	;RP0=0, select bank0
   840  05B7  1303               	bcf	3,6	;RP1=0, select bank0
   841  05B8  1686               	bsf	6,5	;volatile
   842  05B9  2DBD               	goto	u1394
   843  05BA                     u1380:
   844  05BA  1283               	bcf	3,5	;RP0=0, select bank0
   845  05BB  1303               	bcf	3,6	;RP1=0, select bank0
   846  05BC  1286               	bcf	6,5	;volatile
   847  05BD                     u1394:
   848  05BD                     l1216:
   849                           
   850                           ;main.c: 96:              RC0=(__bit)((i>>11)&0x0001);
   851  05BD  0834               	movf	_i,w
   852  05BE  00AF               	movwf	??_main
   853  05BF  0835               	movf	_i+1,w
   854  05C0  00B0               	movwf	??_main+1
   855  05C1  0836               	movf	_i+2,w
   856  05C2  00B1               	movwf	??_main+2
   857  05C3  0837               	movf	_i+3,w
   858  05C4  00B2               	movwf	??_main+3
   859  05C5  300B               	movlw	11
   860  05C6  00B3               	movwf	??_main+4
   861  05C7                     u1405:
   862  05C7  0D32               	rlf	??_main+3,w
   863  05C8  0CB2               	rrf	??_main+3,f
   864  05C9  0CB1               	rrf	??_main+2,f
   865  05CA  0CB0               	rrf	??_main+1,f
   866  05CB  0CAF               	rrf	??_main,f
   867  05CC                     u1400:
   868  05CC  0BB3               	decfsz	??_main+4,f
   869  05CD  2DC7               	goto	u1405
   870  05CE  182F               	btfsc	??_main,0
   871  05CF  2DD1               	goto	u1411
   872  05D0  2DD5               	goto	u1410
   873  05D1                     u1411:
   874  05D1  1283               	bcf	3,5	;RP0=0, select bank0
   875  05D2  1303               	bcf	3,6	;RP1=0, select bank0
   876  05D3  1407               	bsf	7,0	;volatile
   877  05D4  2DD8               	goto	u1424
   878  05D5                     u1410:
   879  05D5  1283               	bcf	3,5	;RP0=0, select bank0
   880  05D6  1303               	bcf	3,6	;RP1=0, select bank0
   881  05D7  1007               	bcf	7,0	;volatile
   882  05D8                     u1424:
   883  05D8                     l1218:
   884                           
   885                           ;main.c: 97:              RC1=(__bit)((i>>12)&0x0001);
   886  05D8  0834               	movf	_i,w
   887  05D9  00AF               	movwf	??_main
   888  05DA  0835               	movf	_i+1,w
   889  05DB  00B0               	movwf	??_main+1
   890  05DC  0836               	movf	_i+2,w
   891  05DD  00B1               	movwf	??_main+2
   892  05DE  0837               	movf	_i+3,w
   893  05DF  00B2               	movwf	??_main+3
   894  05E0  300C               	movlw	12
   895  05E1  00B3               	movwf	??_main+4
   896  05E2                     u1435:
   897  05E2  0D32               	rlf	??_main+3,w
   898  05E3  0CB2               	rrf	??_main+3,f
   899  05E4  0CB1               	rrf	??_main+2,f
   900  05E5  0CB0               	rrf	??_main+1,f
   901  05E6  0CAF               	rrf	??_main,f
   902  05E7                     u1430:
   903  05E7  0BB3               	decfsz	??_main+4,f
   904  05E8  2DE2               	goto	u1435
   905  05E9  182F               	btfsc	??_main,0
   906  05EA  2DEC               	goto	u1441
   907  05EB  2DF0               	goto	u1440
   908  05EC                     u1441:
   909  05EC  1283               	bcf	3,5	;RP0=0, select bank0
   910  05ED  1303               	bcf	3,6	;RP1=0, select bank0
   911  05EE  1487               	bsf	7,1	;volatile
   912  05EF  2DF3               	goto	u1454
   913  05F0                     u1440:
   914  05F0  1283               	bcf	3,5	;RP0=0, select bank0
   915  05F1  1303               	bcf	3,6	;RP1=0, select bank0
   916  05F2  1087               	bcf	7,1	;volatile
   917  05F3                     u1454:
   918  05F3                     l1220:
   919                           
   920                           ;main.c: 98:              RC2=(__bit)((i>>13)&0x0001);
   921  05F3  0834               	movf	_i,w
   922  05F4  00AF               	movwf	??_main
   923  05F5  0835               	movf	_i+1,w
   924  05F6  00B0               	movwf	??_main+1
   925  05F7  0836               	movf	_i+2,w
   926  05F8  00B1               	movwf	??_main+2
   927  05F9  0837               	movf	_i+3,w
   928  05FA  00B2               	movwf	??_main+3
   929  05FB  300D               	movlw	13
   930  05FC  00B3               	movwf	??_main+4
   931  05FD                     u1465:
   932  05FD  0D32               	rlf	??_main+3,w
   933  05FE  0CB2               	rrf	??_main+3,f
   934  05FF  0CB1               	rrf	??_main+2,f
   935  0600  0CB0               	rrf	??_main+1,f
   936  0601  0CAF               	rrf	??_main,f
   937  0602                     u1460:
   938  0602  0BB3               	decfsz	??_main+4,f
   939  0603  2DFD               	goto	u1465
   940  0604  182F               	btfsc	??_main,0
   941  0605  2E07               	goto	u1471
   942  0606  2E0B               	goto	u1470
   943  0607                     u1471:
   944  0607  1283               	bcf	3,5	;RP0=0, select bank0
   945  0608  1303               	bcf	3,6	;RP1=0, select bank0
   946  0609  1507               	bsf	7,2	;volatile
   947  060A  2E0E               	goto	u1484
   948  060B                     u1470:
   949  060B  1283               	bcf	3,5	;RP0=0, select bank0
   950  060C  1303               	bcf	3,6	;RP1=0, select bank0
   951  060D  1107               	bcf	7,2	;volatile
   952  060E                     u1484:
   953  060E                     l1222:
   954                           
   955                           ;main.c: 99:              RE0=(__bit)((i>>14)&0x0001);
   956  060E  0834               	movf	_i,w
   957  060F  00AF               	movwf	??_main
   958  0610  0835               	movf	_i+1,w
   959  0611  00B0               	movwf	??_main+1
   960  0612  0836               	movf	_i+2,w
   961  0613  00B1               	movwf	??_main+2
   962  0614  0837               	movf	_i+3,w
   963  0615  00B2               	movwf	??_main+3
   964  0616  300E               	movlw	14
   965  0617  00B3               	movwf	??_main+4
   966  0618                     u1495:
   967  0618  0D32               	rlf	??_main+3,w
   968  0619  0CB2               	rrf	??_main+3,f
   969  061A  0CB1               	rrf	??_main+2,f
   970  061B  0CB0               	rrf	??_main+1,f
   971  061C  0CAF               	rrf	??_main,f
   972  061D                     u1490:
   973  061D  0BB3               	decfsz	??_main+4,f
   974  061E  2E18               	goto	u1495
   975  061F  182F               	btfsc	??_main,0
   976  0620  2E22               	goto	u1501
   977  0621  2E26               	goto	u1500
   978  0622                     u1501:
   979  0622  1283               	bcf	3,5	;RP0=0, select bank0
   980  0623  1303               	bcf	3,6	;RP1=0, select bank0
   981  0624  1409               	bsf	9,0	;volatile
   982  0625  2E29               	goto	u1514
   983  0626                     u1500:
   984  0626  1283               	bcf	3,5	;RP0=0, select bank0
   985  0627  1303               	bcf	3,6	;RP1=0, select bank0
   986  0628  1009               	bcf	9,0	;volatile
   987  0629                     u1514:
   988  0629                     l1224:
   989                           
   990                           ;main.c: 101:              _delay((unsigned long)((2)*(16000000/4000000.0)));
   991  0629  2E2A               	nop2	;2 cycle nop
   992  062A  2E2B               	nop2	;2 cycle nop
   993  062B  2E2C               	nop2	;2 cycle nop
   994  062C  2E2D               	nop2	;2 cycle nop
   995  062D                     l1226:
   996                           
   997                           ;main.c: 102:              putch(PORTD);
   998  062D  1283               	bcf	3,5	;RP0=0, select bank0
   999  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1000  062F  0808               	movf	8,w	;volatile
  1001  0630  120A  118A  22A5  120A  118A  	fcall	_putch
  1002  0635  0064               	clrwdt	;# 
  1003  0636                     l1228:
  1004                           
  1005                           ;main.c: 104:             }
  1006  0636  3001               	movlw	1
  1007  0637  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0638  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0639  07B4               	addwf	_i,f
  1010  063A  3000               	movlw	0
  1011  063B  1803               	skipnc
  1012  063C  3001               	movlw	1
  1013  063D  07B5               	addwf	_i+1,f
  1014  063E  3000               	movlw	0
  1015  063F  1803               	skipnc
  1016  0640  3001               	movlw	1
  1017  0641  07B6               	addwf	_i+2,f
  1018  0642  3000               	movlw	0
  1019  0643  1803               	skipnc
  1020  0644  3001               	movlw	1
  1021  0645  07B7               	addwf	_i+3,f
  1022  0646                     l1230:
  1023  0646  084F               	movf	_MaxAddr+3,w
  1024  0647  3A80               	xorlw	128
  1025  0648  00FF               	movwf	btemp+1
  1026  0649  0837               	movf	_i+3,w
  1027  064A  3A80               	xorlw	128
  1028  064B  027F               	subwf	btemp+1,w
  1029  064C  1D03               	skipz
  1030  064D  2E58               	goto	u1523
  1031  064E  0836               	movf	_i+2,w
  1032  064F  024E               	subwf	_MaxAddr+2,w
  1033  0650  1D03               	skipz
  1034  0651  2E58               	goto	u1523
  1035  0652  0835               	movf	_i+1,w
  1036  0653  024D               	subwf	_MaxAddr+1,w
  1037  0654  1D03               	skipz
  1038  0655  2E58               	goto	u1523
  1039  0656  0834               	movf	_i,w
  1040  0657  024C               	subwf	_MaxAddr,w
  1041  0658                     u1523:
  1042  0658  1803               	skipnc
  1043  0659  2E5B               	goto	u1521
  1044  065A  2E5C               	goto	u1520
  1045  065B                     u1521:
  1046  065B  2D33               	goto	l1204
  1047  065C                     u1520:
  1048  065C  2D0B               	goto	l93
  1049  065D                     l97:
  1050                           
  1051                           ;main.c: 105:         }
  1052  065D  2D0B               	goto	l93
  1053  065E                     l1232:
  1054  065E  304C               	movlw	76
  1055  065F  063C               	xorwf	_RxBuff,w
  1056  0660  1D03               	btfss	3,2
  1057  0661  2E63               	goto	u1531
  1058  0662  2E64               	goto	u1530
  1059  0663                     u1531:
  1060  0663  2F77               	goto	l1260
  1061  0664                     u1530:
  1062  0664                     l1234:
  1063                           
  1064                           ;main.c: 107:         {;main.c: 108:             i=atol(RxBuff+1);
  1065  0664  303D               	movlw	(low ((_RxBuff| 0+1)))& (0+255)
  1066  0665  120A  118A  242A  120A  118A  	fcall	_atol
  1067  066A  1283               	bcf	3,5	;RP0=0, select bank0
  1068  066B  1303               	bcf	3,6	;RP1=0, select bank0
  1069  066C  0823               	movf	?_atol+3,w
  1070  066D  00B7               	movwf	_i+3
  1071  066E  0822               	movf	?_atol+2,w
  1072  066F  00B6               	movwf	_i+2
  1073  0670  0821               	movf	?_atol+1,w
  1074  0671  00B5               	movwf	_i+1
  1075  0672  0820               	movf	?_atol,w
  1076  0673  00B4               	movwf	_i
  1077  0674                     l1236:
  1078                           
  1079                           ;main.c: 109:             PORTA=i&0x3F;
  1080  0674  0834               	movf	_i,w
  1081  0675  393F               	andlw	63
  1082  0676  0085               	movwf	5	;volatile
  1083  0677                     l1238:
  1084                           
  1085                           ;main.c: 110:             RB0=(__bit)((i>>6)&0x0001);
  1086  0677  0834               	movf	_i,w
  1087  0678  00AF               	movwf	??_main
  1088  0679  0835               	movf	_i+1,w
  1089  067A  00B0               	movwf	??_main+1
  1090  067B  0836               	movf	_i+2,w
  1091  067C  00B1               	movwf	??_main+2
  1092  067D  0837               	movf	_i+3,w
  1093  067E  00B2               	movwf	??_main+3
  1094  067F  3006               	movlw	6
  1095  0680  00B3               	movwf	??_main+4
  1096  0681                     u1545:
  1097  0681  0D32               	rlf	??_main+3,w
  1098  0682  0CB2               	rrf	??_main+3,f
  1099  0683  0CB1               	rrf	??_main+2,f
  1100  0684  0CB0               	rrf	??_main+1,f
  1101  0685  0CAF               	rrf	??_main,f
  1102  0686                     u1540:
  1103  0686  0BB3               	decfsz	??_main+4,f
  1104  0687  2E81               	goto	u1545
  1105  0688  182F               	btfsc	??_main,0
  1106  0689  2E8B               	goto	u1551
  1107  068A  2E8F               	goto	u1550
  1108  068B                     u1551:
  1109  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1110  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1111  068D  1406               	bsf	6,0	;volatile
  1112  068E  2E92               	goto	u1564
  1113  068F                     u1550:
  1114  068F  1283               	bcf	3,5	;RP0=0, select bank0
  1115  0690  1303               	bcf	3,6	;RP1=0, select bank0
  1116  0691  1006               	bcf	6,0	;volatile
  1117  0692                     u1564:
  1118  0692                     l1240:
  1119                           
  1120                           ;main.c: 111:             RB1=(__bit)((i>>7)&0x0001);
  1121  0692  0834               	movf	_i,w
  1122  0693  00AF               	movwf	??_main
  1123  0694  0835               	movf	_i+1,w
  1124  0695  00B0               	movwf	??_main+1
  1125  0696  0836               	movf	_i+2,w
  1126  0697  00B1               	movwf	??_main+2
  1127  0698  0837               	movf	_i+3,w
  1128  0699  00B2               	movwf	??_main+3
  1129  069A  3007               	movlw	7
  1130  069B  00B3               	movwf	??_main+4
  1131  069C                     u1575:
  1132  069C  0D32               	rlf	??_main+3,w
  1133  069D  0CB2               	rrf	??_main+3,f
  1134  069E  0CB1               	rrf	??_main+2,f
  1135  069F  0CB0               	rrf	??_main+1,f
  1136  06A0  0CAF               	rrf	??_main,f
  1137  06A1                     u1570:
  1138  06A1  0BB3               	decfsz	??_main+4,f
  1139  06A2  2E9C               	goto	u1575
  1140  06A3  182F               	btfsc	??_main,0
  1141  06A4  2EA6               	goto	u1581
  1142  06A5  2EAA               	goto	u1580
  1143  06A6                     u1581:
  1144  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1145  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1146  06A8  1486               	bsf	6,1	;volatile
  1147  06A9  2EAD               	goto	u1594
  1148  06AA                     u1580:
  1149  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1150  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1151  06AC  1086               	bcf	6,1	;volatile
  1152  06AD                     u1594:
  1153  06AD                     l1242:
  1154                           
  1155                           ;main.c: 112:             RB2=(__bit)((i>>8)&0x0001);
  1156  06AD  0834               	movf	_i,w
  1157  06AE  00AF               	movwf	??_main
  1158  06AF  0835               	movf	_i+1,w
  1159  06B0  00B0               	movwf	??_main+1
  1160  06B1  0836               	movf	_i+2,w
  1161  06B2  00B1               	movwf	??_main+2
  1162  06B3  0837               	movf	_i+3,w
  1163  06B4  00B2               	movwf	??_main+3
  1164  06B5  3008               	movlw	8
  1165  06B6  00B3               	movwf	??_main+4
  1166  06B7                     u1605:
  1167  06B7  0D32               	rlf	??_main+3,w
  1168  06B8  0CB2               	rrf	??_main+3,f
  1169  06B9  0CB1               	rrf	??_main+2,f
  1170  06BA  0CB0               	rrf	??_main+1,f
  1171  06BB  0CAF               	rrf	??_main,f
  1172  06BC                     u1600:
  1173  06BC  0BB3               	decfsz	??_main+4,f
  1174  06BD  2EB7               	goto	u1605
  1175  06BE  182F               	btfsc	??_main,0
  1176  06BF  2EC1               	goto	u1611
  1177  06C0  2EC5               	goto	u1610
  1178  06C1                     u1611:
  1179  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1180  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1181  06C3  1506               	bsf	6,2	;volatile
  1182  06C4  2EC8               	goto	u1624
  1183  06C5                     u1610:
  1184  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1185  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  1186  06C7  1106               	bcf	6,2	;volatile
  1187  06C8                     u1624:
  1188  06C8                     l1244:
  1189                           
  1190                           ;main.c: 113:             RB4=(__bit)((i>>9)&0x0001);
  1191  06C8  0834               	movf	_i,w
  1192  06C9  00AF               	movwf	??_main
  1193  06CA  0835               	movf	_i+1,w
  1194  06CB  00B0               	movwf	??_main+1
  1195  06CC  0836               	movf	_i+2,w
  1196  06CD  00B1               	movwf	??_main+2
  1197  06CE  0837               	movf	_i+3,w
  1198  06CF  00B2               	movwf	??_main+3
  1199  06D0  3009               	movlw	9
  1200  06D1  00B3               	movwf	??_main+4
  1201  06D2                     u1635:
  1202  06D2  0D32               	rlf	??_main+3,w
  1203  06D3  0CB2               	rrf	??_main+3,f
  1204  06D4  0CB1               	rrf	??_main+2,f
  1205  06D5  0CB0               	rrf	??_main+1,f
  1206  06D6  0CAF               	rrf	??_main,f
  1207  06D7                     u1630:
  1208  06D7  0BB3               	decfsz	??_main+4,f
  1209  06D8  2ED2               	goto	u1635
  1210  06D9  182F               	btfsc	??_main,0
  1211  06DA  2EDC               	goto	u1641
  1212  06DB  2EE0               	goto	u1640
  1213  06DC                     u1641:
  1214  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  1215  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  1216  06DE  1606               	bsf	6,4	;volatile
  1217  06DF  2EE3               	goto	u1654
  1218  06E0                     u1640:
  1219  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1220  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  1221  06E2  1206               	bcf	6,4	;volatile
  1222  06E3                     u1654:
  1223  06E3                     l1246:
  1224                           
  1225                           ;main.c: 114:             RB5=(__bit)((i>>10)&0x0001);
  1226  06E3  0834               	movf	_i,w
  1227  06E4  00AF               	movwf	??_main
  1228  06E5  0835               	movf	_i+1,w
  1229  06E6  00B0               	movwf	??_main+1
  1230  06E7  0836               	movf	_i+2,w
  1231  06E8  00B1               	movwf	??_main+2
  1232  06E9  0837               	movf	_i+3,w
  1233  06EA  00B2               	movwf	??_main+3
  1234  06EB  300A               	movlw	10
  1235  06EC  00B3               	movwf	??_main+4
  1236  06ED                     u1665:
  1237  06ED  0D32               	rlf	??_main+3,w
  1238  06EE  0CB2               	rrf	??_main+3,f
  1239  06EF  0CB1               	rrf	??_main+2,f
  1240  06F0  0CB0               	rrf	??_main+1,f
  1241  06F1  0CAF               	rrf	??_main,f
  1242  06F2                     u1660:
  1243  06F2  0BB3               	decfsz	??_main+4,f
  1244  06F3  2EED               	goto	u1665
  1245  06F4  182F               	btfsc	??_main,0
  1246  06F5  2EF7               	goto	u1671
  1247  06F6  2EFB               	goto	u1670
  1248  06F7                     u1671:
  1249  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1250  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1251  06F9  1686               	bsf	6,5	;volatile
  1252  06FA  2EFE               	goto	u1684
  1253  06FB                     u1670:
  1254  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  1255  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  1256  06FD  1286               	bcf	6,5	;volatile
  1257  06FE                     u1684:
  1258  06FE                     l1248:
  1259                           
  1260                           ;main.c: 115:             RC0=(__bit)((i>>11)&0x0001);
  1261  06FE  0834               	movf	_i,w
  1262  06FF  00AF               	movwf	??_main
  1263  0700  0835               	movf	_i+1,w
  1264  0701  00B0               	movwf	??_main+1
  1265  0702  0836               	movf	_i+2,w
  1266  0703  00B1               	movwf	??_main+2
  1267  0704  0837               	movf	_i+3,w
  1268  0705  00B2               	movwf	??_main+3
  1269  0706  300B               	movlw	11
  1270  0707  00B3               	movwf	??_main+4
  1271  0708                     u1695:
  1272  0708  0D32               	rlf	??_main+3,w
  1273  0709  0CB2               	rrf	??_main+3,f
  1274  070A  0CB1               	rrf	??_main+2,f
  1275  070B  0CB0               	rrf	??_main+1,f
  1276  070C  0CAF               	rrf	??_main,f
  1277  070D                     u1690:
  1278  070D  0BB3               	decfsz	??_main+4,f
  1279  070E  2F08               	goto	u1695
  1280  070F  182F               	btfsc	??_main,0
  1281  0710  2F12               	goto	u1701
  1282  0711  2F16               	goto	u1700
  1283  0712                     u1701:
  1284  0712  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0713  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0714  1407               	bsf	7,0	;volatile
  1287  0715  2F19               	goto	u1714
  1288  0716                     u1700:
  1289  0716  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0717  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0718  1007               	bcf	7,0	;volatile
  1292  0719                     u1714:
  1293  0719                     l1250:
  1294                           
  1295                           ;main.c: 116:             RC1=(__bit)((i>>12)&0x0001);
  1296  0719  0834               	movf	_i,w
  1297  071A  00AF               	movwf	??_main
  1298  071B  0835               	movf	_i+1,w
  1299  071C  00B0               	movwf	??_main+1
  1300  071D  0836               	movf	_i+2,w
  1301  071E  00B1               	movwf	??_main+2
  1302  071F  0837               	movf	_i+3,w
  1303  0720  00B2               	movwf	??_main+3
  1304  0721  300C               	movlw	12
  1305  0722  00B3               	movwf	??_main+4
  1306  0723                     u1725:
  1307  0723  0D32               	rlf	??_main+3,w
  1308  0724  0CB2               	rrf	??_main+3,f
  1309  0725  0CB1               	rrf	??_main+2,f
  1310  0726  0CB0               	rrf	??_main+1,f
  1311  0727  0CAF               	rrf	??_main,f
  1312  0728                     u1720:
  1313  0728  0BB3               	decfsz	??_main+4,f
  1314  0729  2F23               	goto	u1725
  1315  072A  182F               	btfsc	??_main,0
  1316  072B  2F2D               	goto	u1731
  1317  072C  2F31               	goto	u1730
  1318  072D                     u1731:
  1319  072D  1283               	bcf	3,5	;RP0=0, select bank0
  1320  072E  1303               	bcf	3,6	;RP1=0, select bank0
  1321  072F  1487               	bsf	7,1	;volatile
  1322  0730  2F34               	goto	u1744
  1323  0731                     u1730:
  1324  0731  1283               	bcf	3,5	;RP0=0, select bank0
  1325  0732  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0733  1087               	bcf	7,1	;volatile
  1327  0734                     u1744:
  1328  0734                     l1252:
  1329                           
  1330                           ;main.c: 117:             RC2=(__bit)((i>>13)&0x0001);
  1331  0734  0834               	movf	_i,w
  1332  0735  00AF               	movwf	??_main
  1333  0736  0835               	movf	_i+1,w
  1334  0737  00B0               	movwf	??_main+1
  1335  0738  0836               	movf	_i+2,w
  1336  0739  00B1               	movwf	??_main+2
  1337  073A  0837               	movf	_i+3,w
  1338  073B  00B2               	movwf	??_main+3
  1339  073C  300D               	movlw	13
  1340  073D  00B3               	movwf	??_main+4
  1341  073E                     u1755:
  1342  073E  0D32               	rlf	??_main+3,w
  1343  073F  0CB2               	rrf	??_main+3,f
  1344  0740  0CB1               	rrf	??_main+2,f
  1345  0741  0CB0               	rrf	??_main+1,f
  1346  0742  0CAF               	rrf	??_main,f
  1347  0743                     u1750:
  1348  0743  0BB3               	decfsz	??_main+4,f
  1349  0744  2F3E               	goto	u1755
  1350  0745  182F               	btfsc	??_main,0
  1351  0746  2F48               	goto	u1761
  1352  0747  2F4C               	goto	u1760
  1353  0748                     u1761:
  1354  0748  1283               	bcf	3,5	;RP0=0, select bank0
  1355  0749  1303               	bcf	3,6	;RP1=0, select bank0
  1356  074A  1507               	bsf	7,2	;volatile
  1357  074B  2F4F               	goto	u1774
  1358  074C                     u1760:
  1359  074C  1283               	bcf	3,5	;RP0=0, select bank0
  1360  074D  1303               	bcf	3,6	;RP1=0, select bank0
  1361  074E  1107               	bcf	7,2	;volatile
  1362  074F                     u1774:
  1363  074F                     l1254:
  1364                           
  1365                           ;main.c: 118:             RE0=(__bit)((i>>14)&0x0001);
  1366  074F  0834               	movf	_i,w
  1367  0750  00AF               	movwf	??_main
  1368  0751  0835               	movf	_i+1,w
  1369  0752  00B0               	movwf	??_main+1
  1370  0753  0836               	movf	_i+2,w
  1371  0754  00B1               	movwf	??_main+2
  1372  0755  0837               	movf	_i+3,w
  1373  0756  00B2               	movwf	??_main+3
  1374  0757  300E               	movlw	14
  1375  0758  00B3               	movwf	??_main+4
  1376  0759                     u1785:
  1377  0759  0D32               	rlf	??_main+3,w
  1378  075A  0CB2               	rrf	??_main+3,f
  1379  075B  0CB1               	rrf	??_main+2,f
  1380  075C  0CB0               	rrf	??_main+1,f
  1381  075D  0CAF               	rrf	??_main,f
  1382  075E                     u1780:
  1383  075E  0BB3               	decfsz	??_main+4,f
  1384  075F  2F59               	goto	u1785
  1385  0760  182F               	btfsc	??_main,0
  1386  0761  2F63               	goto	u1791
  1387  0762  2F67               	goto	u1790
  1388  0763                     u1791:
  1389  0763  1283               	bcf	3,5	;RP0=0, select bank0
  1390  0764  1303               	bcf	3,6	;RP1=0, select bank0
  1391  0765  1409               	bsf	9,0	;volatile
  1392  0766  2F6A               	goto	u1804
  1393  0767                     u1790:
  1394  0767  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0768  1303               	bcf	3,6	;RP1=0, select bank0
  1396  0769  1009               	bcf	9,0	;volatile
  1397  076A                     u1804:
  1398  076A                     l1256:
  1399                           
  1400                           ;main.c: 120:             _delay((unsigned long)((2)*(16000000/4000000.0)));
  1401  076A  2F6B               	nop2	;2 cycle nop
  1402  076B  2F6C               	nop2	;2 cycle nop
  1403  076C  2F6D               	nop2	;2 cycle nop
  1404  076D  2F6E               	nop2	;2 cycle nop
  1405  076E                     l1258:
  1406                           
  1407                           ;main.c: 121:             putch(PORTD);
  1408  076E  1283               	bcf	3,5	;RP0=0, select bank0
  1409  076F  1303               	bcf	3,6	;RP1=0, select bank0
  1410  0770  0808               	movf	8,w	;volatile
  1411  0771  120A  118A  22A5  120A  118A  	fcall	_putch
  1412                           
  1413                           ;main.c: 122:         }
  1414  0776  2D0B               	goto	l93
  1415  0777                     l1260:
  1416  0777  3072               	movlw	114
  1417  0778  063C               	xorwf	_RxBuff,w
  1418  0779  1D03               	btfss	3,2
  1419  077A  2F7C               	goto	u1811
  1420  077B  2F7D               	goto	u1810
  1421  077C                     u1811:
  1422  077C  2FB5               	goto	l1268
  1423  077D                     u1810:
  1424  077D                     l1262:
  1425                           
  1426                           ;main.c: 124:         {;main.c: 125:             for(i=MinAddr; i<=MaxAddr; i++)
  1427  077D  083B               	movf	_MinAddr+3,w
  1428  077E  00B7               	movwf	_i+3
  1429  077F  083A               	movf	_MinAddr+2,w
  1430  0780  00B6               	movwf	_i+2
  1431  0781  0839               	movf	_MinAddr+1,w
  1432  0782  00B5               	movwf	_i+1
  1433  0783  0838               	movf	_MinAddr,w
  1434  0784  00B4               	movwf	_i
  1435  0785  2F9E               	goto	l1266
  1436  0786                     l1264:
  1437                           
  1438                           ;main.c: 126:             {;main.c: 129:              _delay((unsigned long)((4)*(160000
      +                          00/4000000.0)));
  1439  0786  3004               	movlw	4
  1440  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0789  00AF               	movwf	??_main
  1443  078A                     u1857:
  1444  078A  0BAF               	decfsz	??_main,f
  1445  078B  2F8A               	goto	u1857
  1446  078C  0000               	nop
  1447  078D  0064               	clrwdt	;# 
  1448                           
  1449                           ;main.c: 131:             }
  1450  078E  3001               	movlw	1
  1451  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1452  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1453  0791  07B4               	addwf	_i,f
  1454  0792  3000               	movlw	0
  1455  0793  1803               	skipnc
  1456  0794  3001               	movlw	1
  1457  0795  07B5               	addwf	_i+1,f
  1458  0796  3000               	movlw	0
  1459  0797  1803               	skipnc
  1460  0798  3001               	movlw	1
  1461  0799  07B6               	addwf	_i+2,f
  1462  079A  3000               	movlw	0
  1463  079B  1803               	skipnc
  1464  079C  3001               	movlw	1
  1465  079D  07B7               	addwf	_i+3,f
  1466  079E                     l1266:
  1467  079E  084F               	movf	_MaxAddr+3,w
  1468  079F  3A80               	xorlw	128
  1469  07A0  00FF               	movwf	btemp+1
  1470  07A1  0837               	movf	_i+3,w
  1471  07A2  3A80               	xorlw	128
  1472  07A3  027F               	subwf	btemp+1,w
  1473  07A4  1D03               	skipz
  1474  07A5  2FB0               	goto	u1823
  1475  07A6  0836               	movf	_i+2,w
  1476  07A7  024E               	subwf	_MaxAddr+2,w
  1477  07A8  1D03               	skipz
  1478  07A9  2FB0               	goto	u1823
  1479  07AA  0835               	movf	_i+1,w
  1480  07AB  024D               	subwf	_MaxAddr+1,w
  1481  07AC  1D03               	skipz
  1482  07AD  2FB0               	goto	u1823
  1483  07AE  0834               	movf	_i,w
  1484  07AF  024C               	subwf	_MaxAddr,w
  1485  07B0                     u1823:
  1486  07B0  1803               	skipnc
  1487  07B1  2FB3               	goto	u1821
  1488  07B2  2FB4               	goto	u1820
  1489  07B3                     u1821:
  1490  07B3  2F86               	goto	l1264
  1491  07B4                     u1820:
  1492  07B4  2D0B               	goto	l93
  1493  07B5                     l1268:
  1494  07B5  306D               	movlw	109
  1495  07B6  063C               	xorwf	_RxBuff,w
  1496  07B7  1D03               	btfss	3,2
  1497  07B8  2FBA               	goto	u1831
  1498  07B9  2FBB               	goto	u1830
  1499  07BA                     u1831:
  1500  07BA  2FCC               	goto	l1272
  1501  07BB                     u1830:
  1502  07BB                     l1270:
  1503                           
  1504                           ;main.c: 134:         {;main.c: 135:             MinAddr=atol(RxBuff+1);
  1505  07BB  303D               	movlw	(low ((_RxBuff| 0+1)))& (0+255)
  1506  07BC  120A  118A  242A  120A  118A  	fcall	_atol
  1507  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1508  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1509  07C3  0823               	movf	?_atol+3,w
  1510  07C4  00BB               	movwf	_MinAddr+3
  1511  07C5  0822               	movf	?_atol+2,w
  1512  07C6  00BA               	movwf	_MinAddr+2
  1513  07C7  0821               	movf	?_atol+1,w
  1514  07C8  00B9               	movwf	_MinAddr+1
  1515  07C9  0820               	movf	?_atol,w
  1516  07CA  00B8               	movwf	_MinAddr
  1517                           
  1518                           ;main.c: 136:         }
  1519  07CB  2D0B               	goto	l93
  1520  07CC                     l1272:
  1521  07CC  304D               	movlw	77
  1522  07CD  063C               	xorwf	_RxBuff,w
  1523  07CE  1D03               	btfss	3,2
  1524  07CF  2FD1               	goto	u1841
  1525  07D0  2FD2               	goto	u1840
  1526  07D1                     u1841:
  1527  07D1  2E5D               	goto	l97
  1528  07D2                     u1840:
  1529  07D2                     l1274:
  1530                           
  1531                           ;main.c: 138:         {;main.c: 139:             MaxAddr=atol(RxBuff+1);
  1532  07D2  303D               	movlw	(low ((_RxBuff| 0+1)))& (0+255)
  1533  07D3  120A  118A  242A  120A  118A  	fcall	_atol
  1534  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  1535  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  1536  07DA  0823               	movf	?_atol+3,w
  1537  07DB  00CF               	movwf	_MaxAddr+3
  1538  07DC  0822               	movf	?_atol+2,w
  1539  07DD  00CE               	movwf	_MaxAddr+2
  1540  07DE  0821               	movf	?_atol+1,w
  1541  07DF  00CD               	movwf	_MaxAddr+1
  1542  07E0  0820               	movf	?_atol,w
  1543  07E1  00CC               	movwf	_MaxAddr
  1544  07E2  2D0B               	goto	l93
  1545  07E3  120A  118A  2800   	ljmp	start
  1546  07E6                     __end_of_main:
  1547                           
  1548                           	psect	text1
  1549  02A5                     __ptext1:	
  1550 ;; *************** function _putch *****************
  1551 ;; Defined at:
  1552 ;;		line 153 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  data            1    wreg     unsigned char 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  data            1    0[COMMON] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1566 ;;      Params:         0       0       0       0       0
  1567 ;;      Locals:         1       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0
  1569 ;;      Totals:         1       0       0       0       0
  1570 ;;Total ram usage:        1 bytes
  1571 ;; Hardware stack levels used: 1
  1572 ;; This function calls:
  1573 ;;		Nothing
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579  02A5                     _putch:	
  1580                           ;psect for function _putch
  1581                           
  1582                           
  1583                           ;incstack = 0
  1584                           ; Regs used in _putch: [wreg]
  1585                           ;putch@data stored from wreg
  1586  02A5  00F0               	movwf	putch@data
  1587  02A6                     l1120:
  1588                           
  1589                           ;main.c: 153: void putch(char data);main.c: 154: {;main.c: 155:     while(!TRMT)
  1590  02A6  2AA8               	goto	l117
  1591  02A7                     l118:
  1592  02A7  0064               	clrwdt	;# 
  1593  02A8                     l117:
  1594                           
  1595                           ;main.c: 155:     while(!TRMT)
  1596  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  1597  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  1598  02AA  1C98               	btfss	24,1	;volatile
  1599  02AB  2AAD               	goto	u1161
  1600  02AC  2AAE               	goto	u1160
  1601  02AD                     u1161:
  1602  02AD  2AA7               	goto	l118
  1603  02AE                     u1160:
  1604  02AE                     l1122:
  1605                           
  1606                           ;main.c: 157:     TXREG = data;
  1607  02AE  0870               	movf	putch@data,w
  1608  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1609  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1610  02B1  0099               	movwf	25	;volatile
  1611  02B2                     l120:
  1612  02B2  0008               	return
  1613  02B3                     __end_of_putch:
  1614                           
  1615                           	psect	text2
  1616  0318                     __ptext2:	
  1617 ;; *************** function _getString *****************
  1618 ;; Defined at:
  1619 ;;		line 190 in file "main.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  input           1    wreg     PTR unsigned char 
  1622 ;;		 -> RxBuff(8), 
  1623 ;;  length          2    0[COMMON] unsigned int 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  input           1    4[COMMON] PTR unsigned char 
  1626 ;;		 -> RxBuff(8), 
  1627 ;;  i               2    5[COMMON] int 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  1    wreg      void 
  1630 ;; Registers used:
  1631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1637 ;;      Params:         2       0       0       0       0
  1638 ;;      Locals:         3       0       0       0       0
  1639 ;;      Temps:          2       0       0       0       0
  1640 ;;      Totals:         7       0       0       0       0
  1641 ;;Total ram usage:        7 bytes
  1642 ;; Hardware stack levels used: 1
  1643 ;; Hardware stack levels required when called: 1
  1644 ;; This function calls:
  1645 ;;		_getch
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651  0318                     _getString:	
  1652                           ;psect for function _getString
  1653                           
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _getString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1657                           ;getString@input stored from wreg
  1658  0318  00F4               	movwf	getString@input
  1659  0319                     l1096:
  1660                           
  1661                           ;main.c: 190: void getString(char *input, unsigned int length);main.c: 191: {;main.c: 19
      +                          2:     for(int i=0;i<length;i++)
  1662  0319  01F5               	clrf	getString@i
  1663  031A  01F6               	clrf	getString@i+1
  1664  031B  2B3C               	goto	l141
  1665  031C                     l1098:
  1666                           
  1667                           ;main.c: 193:     {;main.c: 194:         input[i] = (char)getch();
  1668  031C  120A  118A  228F  120A  118A  	fcall	_getch
  1669  0321  00F2               	movwf	??_getString
  1670  0322  0875               	movf	getString@i,w
  1671  0323  0774               	addwf	getString@input,w
  1672  0324  00F3               	movwf	??_getString+1
  1673  0325  0873               	movf	??_getString+1,w
  1674  0326  0084               	movwf	4
  1675  0327  0872               	movf	??_getString,w
  1676  0328  1383               	bcf	3,7	;select IRP bank0
  1677  0329  0080               	movwf	0
  1678  032A                     l1100:
  1679                           
  1680                           ;main.c: 195:         if(input[i]==13)
  1681  032A  0875               	movf	getString@i,w
  1682  032B  0774               	addwf	getString@input,w
  1683  032C  00F2               	movwf	??_getString
  1684  032D  0872               	movf	??_getString,w
  1685  032E  0084               	movwf	4
  1686  032F  300D               	movlw	13
  1687  0330  0600               	xorwf	0,w
  1688  0331  1D03               	btfss	3,2
  1689  0332  2B34               	goto	u1121
  1690  0333  2B35               	goto	u1120
  1691  0334                     u1121:
  1692  0334  2B36               	goto	l1104
  1693  0335                     u1120:
  1694  0335  2B46               	goto	l145
  1695  0336                     l1104:
  1696                           
  1697                           ;main.c: 197:     }
  1698  0336  3001               	movlw	1
  1699  0337  07F5               	addwf	getString@i,f
  1700  0338  1803               	skipnc
  1701  0339  0AF6               	incf	getString@i+1,f
  1702  033A  3000               	movlw	0
  1703  033B  07F6               	addwf	getString@i+1,f
  1704  033C                     l141:
  1705  033C  0871               	movf	getString@length+1,w
  1706  033D  0276               	subwf	getString@i+1,w
  1707  033E  1D03               	skipz
  1708  033F  2B42               	goto	u1135
  1709  0340  0870               	movf	getString@length,w
  1710  0341  0275               	subwf	getString@i,w
  1711  0342                     u1135:
  1712  0342  1C03               	skipc
  1713  0343  2B45               	goto	u1131
  1714  0344  2B46               	goto	u1130
  1715  0345                     u1131:
  1716  0345  2B1C               	goto	l1098
  1717  0346                     u1130:
  1718  0346                     l145:
  1719  0346  0008               	return
  1720  0347                     __end_of_getString:
  1721                           
  1722                           	psect	text3
  1723  028F                     __ptext3:	
  1724 ;; *************** function _getch *****************
  1725 ;; Defined at:
  1726 ;;		line 161 in file "main.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      unsigned char 
  1733 ;; Registers used:
  1734 ;;		wreg
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1740 ;;      Params:         0       0       0       0       0
  1741 ;;      Locals:         0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0
  1743 ;;      Totals:         0       0       0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_getString
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753  028F                     _getch:	
  1754                           ;psect for function _getch
  1755                           
  1756  028F                     l1016:	
  1757                           ;incstack = 0
  1758                           ; Regs used in _getch: [wreg]
  1759                           
  1760                           
  1761                           ;main.c: 163:     while(!RCIF)
  1762  028F  2A91               	goto	l123
  1763  0290                     l124:
  1764  0290  0064               	clrwdt	;# 
  1765  0291                     l123:
  1766                           
  1767                           ;main.c: 163:     while(!RCIF)
  1768  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0292  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0293  1E8C               	btfss	12,5	;volatile
  1771  0294  2A96               	goto	u931
  1772  0295  2A97               	goto	u930
  1773  0296                     u931:
  1774  0296  2A90               	goto	l124
  1775  0297                     u930:
  1776  0297                     l1018:
  1777                           
  1778                           ;main.c: 165:     return RCREG;
  1779  0297  081A               	movf	26,w	;volatile
  1780  0298                     l126:
  1781  0298  0008               	return
  1782  0299                     __end_of_getch:
  1783                           
  1784                           	psect	text4
  1785  0285                     __ptext4:	
  1786 ;; *************** function _flushRx *****************
  1787 ;; Defined at:
  1788 ;;		line 169 in file "main.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  Temp            1    0        unsigned char 
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1802 ;;      Params:         0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used: 1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_main
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815  0285                     _flushRx:	
  1816                           ;psect for function _flushRx
  1817                           
  1818  0285                     l1090:	
  1819                           ;incstack = 0
  1820                           ; Regs used in _flushRx: [wreg+status,2]
  1821                           
  1822                           
  1823                           ;main.c: 172:     while(RCIF)
  1824  0285  2A88               	goto	l1094
  1825  0286                     l1092:
  1826  0286  081A               	movf	26,w	;volatile
  1827  0287  0064               	clrwdt	;# 
  1828  0288                     l1094:
  1829                           
  1830                           ;main.c: 172:     while(RCIF)
  1831  0288  1283               	bcf	3,5	;RP0=0, select bank0
  1832  0289  1303               	bcf	3,6	;RP1=0, select bank0
  1833  028A  1A8C               	btfsc	12,5	;volatile
  1834  028B  2A8D               	goto	u1111
  1835  028C  2A8E               	goto	u1110
  1836  028D                     u1111:
  1837  028D  2A86               	goto	l1092
  1838  028E                     u1110:
  1839  028E                     l132:
  1840  028E  0008               	return
  1841  028F                     __end_of_flushRx:
  1842                           
  1843                           	psect	text5
  1844  02F4                     __ptext5:	
  1845 ;; *************** function _cleanRx *****************
  1846 ;; Defined at:
  1847 ;;		line 180 in file "main.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  i               2    0[COMMON] int 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1861 ;;      Params:         0       0       0       0       0
  1862 ;;      Locals:         2       0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0
  1864 ;;      Totals:         2       0       0       0       0
  1865 ;;Total ram usage:        2 bytes
  1866 ;; Hardware stack levels used: 1
  1867 ;; This function calls:
  1868 ;;		Nothing
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874  02F4                     _cleanRx:	
  1875                           ;psect for function _cleanRx
  1876                           
  1877  02F4                     l1106:	
  1878                           ;incstack = 0
  1879                           ; Regs used in _cleanRx: [wreg-fsr0h+status,2+status,0+btemp+1]
  1880                           
  1881                           
  1882                           ;main.c: 182:     for(int i=0;i<8;i++)
  1883  02F4  01F0               	clrf	cleanRx@i
  1884  02F5  01F1               	clrf	cleanRx@i+1
  1885  02F6                     l1112:
  1886                           
  1887                           ;main.c: 183:     {;main.c: 184:       if(RxBuff[i]<20)
  1888  02F6  0870               	movf	cleanRx@i,w
  1889  02F7  3E3C               	addlw	(low (_RxBuff| 0))& (0+255)
  1890  02F8  0084               	movwf	4
  1891  02F9  3014               	movlw	20
  1892  02FA  1383               	bcf	3,7	;select IRP bank0
  1893  02FB  0200               	subwf	0,w
  1894  02FC  1803               	skipnc
  1895  02FD  2AFF               	goto	u1141
  1896  02FE  2B00               	goto	u1140
  1897  02FF                     u1141:
  1898  02FF  2B04               	goto	l1116
  1899  0300                     u1140:
  1900  0300                     l1114:
  1901                           
  1902                           ;main.c: 185:           RxBuff[i]=0;
  1903  0300  0870               	movf	cleanRx@i,w
  1904  0301  3E3C               	addlw	(low (_RxBuff| 0))& (0+255)
  1905  0302  0084               	movwf	4
  1906  0303  0180               	clrf	0
  1907  0304                     l1116:
  1908                           
  1909                           ;main.c: 186:     }
  1910  0304  3001               	movlw	1
  1911  0305  07F0               	addwf	cleanRx@i,f
  1912  0306  1803               	skipnc
  1913  0307  0AF1               	incf	cleanRx@i+1,f
  1914  0308  3000               	movlw	0
  1915  0309  07F1               	addwf	cleanRx@i+1,f
  1916  030A                     l1118:
  1917  030A  0871               	movf	cleanRx@i+1,w
  1918  030B  3A80               	xorlw	128
  1919  030C  00FF               	movwf	btemp+1
  1920  030D  3080               	movlw	128
  1921  030E  027F               	subwf	btemp+1,w
  1922  030F  1D03               	skipz
  1923  0310  2B13               	goto	u1155
  1924  0311  3008               	movlw	8
  1925  0312  0270               	subwf	cleanRx@i,w
  1926  0313                     u1155:
  1927  0313  1C03               	skipc
  1928  0314  2B16               	goto	u1151
  1929  0315  2B17               	goto	u1150
  1930  0316                     u1151:
  1931  0316  2AF6               	goto	l1112
  1932  0317                     u1150:
  1933  0317                     l138:
  1934  0317  0008               	return
  1935  0318                     __end_of_cleanRx:
  1936                           
  1937                           	psect	text6
  1938  042A                     __ptext6:	
  1939 ;; *************** function _atol *****************
  1940 ;; Defined at:
  1941 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/atol.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  s               1    wreg     PTR const unsigned char 
  1944 ;;		 -> RxBuff(8), 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  1947 ;;		 -> RxBuff(8), 
  1948 ;;  a               4    9[BANK0 ] long 
  1949 ;;  c               1   14[BANK0 ] unsigned char 
  1950 ;;  sign            1    8[BANK0 ] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  4    0[BANK0 ] long 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1960 ;;      Params:         0       4       0       0       0
  1961 ;;      Locals:         0       7       0       0       0
  1962 ;;      Temps:          0       4       0       0       0
  1963 ;;      Totals:         0      15       0       0       0
  1964 ;;Total ram usage:       15 bytes
  1965 ;; Hardware stack levels used: 1
  1966 ;; Hardware stack levels required when called: 1
  1967 ;; This function calls:
  1968 ;;		___lmul
  1969 ;;		_isdigit
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975  042A                     _atol:	
  1976                           ;psect for function _atol
  1977                           
  1978                           
  1979                           ;incstack = 0
  1980                           ; Regs used in _atol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1981                           ;atol@s stored from wreg
  1982  042A  1283               	bcf	3,5	;RP0=0, select bank0
  1983  042B  1303               	bcf	3,6	;RP1=0, select bank0
  1984  042C  00AD               	movwf	atol@s
  1985  042D                     l684:
  1986  042D                     l1124:
  1987  042D  082D               	movf	atol@s,w
  1988  042E  0084               	movwf	4
  1989  042F  1383               	bcf	3,7	;select IRP bank0
  1990  0430  0800               	movf	0,w
  1991  0431  00A4               	movwf	??_atol
  1992  0432  0824               	movf	??_atol,w
  1993  0433  00AE               	movwf	atol@c
  1994  0434                     l1126:
  1995  0434  3001               	movlw	1
  1996  0435  00A4               	movwf	??_atol
  1997  0436  0824               	movf	??_atol,w
  1998  0437  07AD               	addwf	atol@s,f
  1999  0438                     l1128:
  2000  0438  3020               	movlw	32
  2001  0439  062E               	xorwf	atol@c,w
  2002  043A  1903               	btfsc	3,2
  2003  043B  2C3D               	goto	u1171
  2004  043C  2C3E               	goto	u1170
  2005  043D                     u1171:
  2006  043D  2C2D               	goto	l684
  2007  043E                     u1170:
  2008  043E                     l1130:
  2009  043E  3009               	movlw	9
  2010  043F  062E               	xorwf	atol@c,w
  2011  0440  1903               	btfsc	3,2
  2012  0441  2C43               	goto	u1181
  2013  0442  2C44               	goto	u1180
  2014  0443                     u1181:
  2015  0443  2C2D               	goto	l684
  2016  0444                     u1180:
  2017  0444                     l1132:
  2018  0444  3000               	movlw	0
  2019  0445  00AC               	movwf	atol@a+3
  2020  0446  3000               	movlw	0
  2021  0447  00AB               	movwf	atol@a+2
  2022  0448  3000               	movlw	0
  2023  0449  00AA               	movwf	atol@a+1
  2024  044A  3000               	movlw	0
  2025  044B  00A9               	movwf	atol@a
  2026  044C                     l1134:
  2027  044C  01A8               	clrf	atol@sign
  2028  044D                     l1136:
  2029  044D  302D               	movlw	45
  2030  044E  062E               	xorwf	atol@c,w
  2031  044F  1D03               	btfss	3,2
  2032  0450  2C52               	goto	u1191
  2033  0451  2C53               	goto	u1190
  2034  0452                     u1191:
  2035  0452  2C63               	goto	l1144
  2036  0453                     u1190:
  2037  0453                     l1138:
  2038  0453  3001               	movlw	1
  2039  0454  00A4               	movwf	??_atol
  2040  0455  0824               	movf	??_atol,w
  2041  0456  07A8               	addwf	atol@sign,f
  2042  0457                     l1140:
  2043  0457  082D               	movf	atol@s,w
  2044  0458  0084               	movwf	4
  2045  0459  1383               	bcf	3,7	;select IRP bank0
  2046  045A  0800               	movf	0,w
  2047  045B  00A4               	movwf	??_atol
  2048  045C  0824               	movf	??_atol,w
  2049  045D  00AE               	movwf	atol@c
  2050  045E                     l1142:
  2051  045E  3001               	movlw	1
  2052  045F  00A4               	movwf	??_atol
  2053  0460  0824               	movf	??_atol,w
  2054  0461  07AD               	addwf	atol@s,f
  2055  0462  2CA4               	goto	l1156
  2056  0463                     l1144:
  2057  0463  302B               	movlw	43
  2058  0464  062E               	xorwf	atol@c,w
  2059  0465  1D03               	btfss	3,2
  2060  0466  2C68               	goto	u1201
  2061  0467  2C69               	goto	u1200
  2062  0468                     u1201:
  2063  0468  2CA4               	goto	l1156
  2064  0469                     u1200:
  2065  0469  2C57               	goto	l1140
  2066  046A                     l1150:
  2067  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2068  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2069  046C  082E               	movf	atol@c,w
  2070  046D  3ED0               	addlw	208
  2071  046E  00A4               	movwf	??_atol
  2072  046F  01A5               	clrf	??_atol+1
  2073  0470  01A6               	clrf	??_atol+2
  2074  0471  01A7               	clrf	??_atol+3
  2075  0472  082C               	movf	atol@a+3,w
  2076  0473  00F3               	movwf	___lmul@multiplier+3
  2077  0474  082B               	movf	atol@a+2,w
  2078  0475  00F2               	movwf	___lmul@multiplier+2
  2079  0476  082A               	movf	atol@a+1,w
  2080  0477  00F1               	movwf	___lmul@multiplier+1
  2081  0478  0829               	movf	atol@a,w
  2082  0479  00F0               	movwf	___lmul@multiplier
  2083  047A  3000               	movlw	0
  2084  047B  00F7               	movwf	___lmul@multiplicand+3
  2085  047C  3000               	movlw	0
  2086  047D  00F6               	movwf	___lmul@multiplicand+2
  2087  047E  3000               	movlw	0
  2088  047F  00F5               	movwf	___lmul@multiplicand+1
  2089  0480  300A               	movlw	10
  2090  0481  00F4               	movwf	___lmul@multiplicand
  2091  0482  120A  118A  2347  120A  118A  	fcall	___lmul
  2092  0487  0870               	movf	?___lmul,w
  2093  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2094  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2095  048A  07A4               	addwf	??_atol,f
  2096  048B  0871               	movf	?___lmul+1,w
  2097  048C  1803               	skipnc
  2098  048D  0F71               	incfsz	?___lmul+1,w
  2099  048E  2C90               	goto	u1210
  2100  048F  2C91               	goto	u1211
  2101  0490                     u1210:
  2102  0490  07A5               	addwf	??_atol+1,f
  2103  0491                     u1211:
  2104  0491  0872               	movf	?___lmul+2,w
  2105  0492  1803               	skipnc
  2106  0493  0F72               	incfsz	?___lmul+2,w
  2107  0494  2C96               	goto	u1212
  2108  0495  2C97               	goto	u1213
  2109  0496                     u1212:
  2110  0496  07A6               	addwf	??_atol+2,f
  2111  0497                     u1213:
  2112  0497  0873               	movf	?___lmul+3,w
  2113  0498  1803               	skipnc
  2114  0499  0A73               	incf	?___lmul+3,w
  2115  049A  07A7               	addwf	??_atol+3,f
  2116  049B  0827               	movf	??_atol+3,w
  2117  049C  00AC               	movwf	atol@a+3
  2118  049D  0826               	movf	??_atol+2,w
  2119  049E  00AB               	movwf	atol@a+2
  2120  049F  0825               	movf	??_atol+1,w
  2121  04A0  00AA               	movwf	atol@a+1
  2122  04A1  0824               	movf	??_atol,w
  2123  04A2  00A9               	movwf	atol@a
  2124  04A3  2C57               	goto	l1140
  2125  04A4                     l1156:
  2126  04A4  082E               	movf	atol@c,w
  2127  04A5  120A  118A  22B3  120A  118A  	fcall	_isdigit
  2128  04AA  1803               	btfsc	3,0
  2129  04AB  2CAD               	goto	u1221
  2130  04AC  2CAE               	goto	u1220
  2131  04AD                     u1221:
  2132  04AD  2C6A               	goto	l1150
  2133  04AE                     u1220:
  2134  04AE                     l1158:
  2135  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2136  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2137  04B0  0828               	movf	atol@sign,w
  2138  04B1  1903               	btfsc	3,2
  2139  04B2  2CB4               	goto	u1231
  2140  04B3  2CB5               	goto	u1230
  2141  04B4                     u1231:
  2142  04B4  2CC5               	goto	l1164
  2143  04B5                     u1230:
  2144  04B5                     l1160:
  2145  04B5  0929               	comf	atol@a,w
  2146  04B6  00A0               	movwf	?_atol
  2147  04B7  092A               	comf	atol@a+1,w
  2148  04B8  00A1               	movwf	?_atol+1
  2149  04B9  092B               	comf	atol@a+2,w
  2150  04BA  00A2               	movwf	?_atol+2
  2151  04BB  092C               	comf	atol@a+3,w
  2152  04BC  00A3               	movwf	?_atol+3
  2153  04BD  0AA0               	incf	?_atol,f
  2154  04BE  1903               	skipnz
  2155  04BF  0AA1               	incf	?_atol+1,f
  2156  04C0  1903               	skipnz
  2157  04C1  0AA2               	incf	?_atol+2,f
  2158  04C2  1903               	skipnz
  2159  04C3  0AA3               	incf	?_atol+3,f
  2160  04C4  2CCD               	goto	l693
  2161  04C5                     l1164:
  2162  04C5  082C               	movf	atol@a+3,w
  2163  04C6  00A3               	movwf	?_atol+3
  2164  04C7  082B               	movf	atol@a+2,w
  2165  04C8  00A2               	movwf	?_atol+2
  2166  04C9  082A               	movf	atol@a+1,w
  2167  04CA  00A1               	movwf	?_atol+1
  2168  04CB  0829               	movf	atol@a,w
  2169  04CC  00A0               	movwf	?_atol
  2170  04CD                     l693:
  2171  04CD  0008               	return
  2172  04CE                     __end_of_atol:
  2173                           
  2174                           	psect	text7
  2175  02B3                     __ptext7:	
  2176 ;; *************** function _isdigit *****************
  2177 ;; Defined at:
  2178 ;;		line 8 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/isdigit.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;  c               1    wreg     unsigned char 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  c               1    1[COMMON] unsigned char 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;		None               void
  2185 ;; Registers used:
  2186 ;;		wreg, status,2, status,0
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2192 ;;      Params:         0       0       0       0       0
  2193 ;;      Locals:         2       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0
  2195 ;;      Totals:         2       0       0       0       0
  2196 ;;Total ram usage:        2 bytes
  2197 ;; Hardware stack levels used: 1
  2198 ;; This function calls:
  2199 ;;		Nothing
  2200 ;; This function is called by:
  2201 ;;		_atol
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205  02B3                     _isdigit:	
  2206                           ;psect for function _isdigit
  2207                           
  2208                           
  2209                           ;incstack = 0
  2210                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2211                           ;isdigit@c stored from wreg
  2212  02B3  00F1               	movwf	isdigit@c
  2213  02B4                     l1076:
  2214  02B4  01F0               	clrf	_isdigit$566
  2215  02B5                     l1078:
  2216  02B5  303A               	movlw	58
  2217  02B6  0271               	subwf	isdigit@c,w
  2218  02B7  1803               	skipnc
  2219  02B8  2ABA               	goto	u1091
  2220  02B9  2ABB               	goto	u1090
  2221  02BA                     u1091:
  2222  02BA  2AC3               	goto	l1084
  2223  02BB                     u1090:
  2224  02BB                     l1080:
  2225  02BB  3030               	movlw	48
  2226  02BC  0271               	subwf	isdigit@c,w
  2227  02BD  1C03               	skipc
  2228  02BE  2AC0               	goto	u1101
  2229  02BF  2AC1               	goto	u1100
  2230  02C0                     u1101:
  2231  02C0  2AC3               	goto	l1084
  2232  02C1                     u1100:
  2233  02C1                     l1082:
  2234  02C1  01F0               	clrf	_isdigit$566
  2235  02C2  0AF0               	incf	_isdigit$566,f
  2236  02C3                     l1084:
  2237  02C3  0C70               	rrf	_isdigit$566,w
  2238  02C4                     l698:
  2239  02C4  0008               	return
  2240  02C5                     __end_of_isdigit:
  2241                           
  2242                           	psect	text8
  2243  0347                     __ptext8:	
  2244 ;; *************** function ___lmul *****************
  2245 ;; Defined at:
  2246 ;;		line 15 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/Umul32.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  multiplier      4    0[COMMON] unsigned long 
  2249 ;;  multiplicand    4    4[COMMON] unsigned long 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  product         4    9[COMMON] unsigned long 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  4    0[COMMON] unsigned long 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2261 ;;      Params:         8       0       0       0       0
  2262 ;;      Locals:         4       0       0       0       0
  2263 ;;      Temps:          1       0       0       0       0
  2264 ;;      Totals:        13       0       0       0       0
  2265 ;;Total ram usage:       13 bytes
  2266 ;; Hardware stack levels used: 1
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_atol
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274  0347                     ___lmul:	
  2275                           ;psect for function ___lmul
  2276                           
  2277  0347                     l1022:	
  2278                           ;incstack = 0
  2279                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2280                           
  2281  0347  3000               	movlw	0
  2282  0348  00FC               	movwf	___lmul@product+3
  2283  0349  3000               	movlw	0
  2284  034A  00FB               	movwf	___lmul@product+2
  2285  034B  3000               	movlw	0
  2286  034C  00FA               	movwf	___lmul@product+1
  2287  034D  3000               	movlw	0
  2288  034E  00F9               	movwf	___lmul@product
  2289  034F                     l1024:
  2290  034F  1C70               	btfss	___lmul@multiplier,0
  2291  0350  2B52               	goto	u941
  2292  0351  2B53               	goto	u940
  2293  0352                     u941:
  2294  0352  2B6A               	goto	l1028
  2295  0353                     u940:
  2296  0353                     l1026:
  2297  0353  0874               	movf	___lmul@multiplicand,w
  2298  0354  07F9               	addwf	___lmul@product,f
  2299  0355  0875               	movf	___lmul@multiplicand+1,w
  2300  0356  1103               	clrz
  2301  0357  1803               	skipnc
  2302  0358  3E01               	addlw	1
  2303  0359  1903               	skipnz
  2304  035A  2B5C               	goto	u951
  2305  035B  07FA               	addwf	___lmul@product+1,f
  2306  035C                     u951:
  2307  035C  0876               	movf	___lmul@multiplicand+2,w
  2308  035D  1103               	clrz
  2309  035E  1803               	skipnc
  2310  035F  3E01               	addlw	1
  2311  0360  1903               	skipnz
  2312  0361  2B63               	goto	u952
  2313  0362  07FB               	addwf	___lmul@product+2,f
  2314  0363                     u952:
  2315  0363  0877               	movf	___lmul@multiplicand+3,w
  2316  0364  1103               	clrz
  2317  0365  1803               	skipnc
  2318  0366  3E01               	addlw	1
  2319  0367  1903               	skipnz
  2320  0368  2B6A               	goto	u953
  2321  0369  07FC               	addwf	___lmul@product+3,f
  2322  036A                     u953:
  2323  036A                     l1028:
  2324  036A  3001               	movlw	1
  2325  036B  00F8               	movwf	??___lmul
  2326  036C                     u965:
  2327  036C  1003               	clrc
  2328  036D  0DF4               	rlf	___lmul@multiplicand,f
  2329  036E  0DF5               	rlf	___lmul@multiplicand+1,f
  2330  036F  0DF6               	rlf	___lmul@multiplicand+2,f
  2331  0370  0DF7               	rlf	___lmul@multiplicand+3,f
  2332  0371  0BF8               	decfsz	??___lmul,f
  2333  0372  2B6C               	goto	u965
  2334  0373                     l1030:
  2335  0373  3001               	movlw	1
  2336  0374                     u975:
  2337  0374  1003               	clrc
  2338  0375  0CF3               	rrf	___lmul@multiplier+3,f
  2339  0376  0CF2               	rrf	___lmul@multiplier+2,f
  2340  0377  0CF1               	rrf	___lmul@multiplier+1,f
  2341  0378  0CF0               	rrf	___lmul@multiplier,f
  2342  0379  3EFF               	addlw	-1
  2343  037A  1D03               	skipz
  2344  037B  2B74               	goto	u975
  2345  037C  0873               	movf	___lmul@multiplier+3,w
  2346  037D  0472               	iorwf	___lmul@multiplier+2,w
  2347  037E  0471               	iorwf	___lmul@multiplier+1,w
  2348  037F  0470               	iorwf	___lmul@multiplier,w
  2349  0380  1D03               	skipz
  2350  0381  2B83               	goto	u981
  2351  0382  2B84               	goto	u980
  2352  0383                     u981:
  2353  0383  2B4F               	goto	l1024
  2354  0384                     u980:
  2355  0384                     l1032:
  2356  0384  087C               	movf	___lmul@product+3,w
  2357  0385  00F3               	movwf	?___lmul+3
  2358  0386  087B               	movf	___lmul@product+2,w
  2359  0387  00F2               	movwf	?___lmul+2
  2360  0388  087A               	movf	___lmul@product+1,w
  2361  0389  00F1               	movwf	?___lmul+1
  2362  038A  0879               	movf	___lmul@product,w
  2363  038B  00F0               	movwf	?___lmul
  2364  038C                     l245:
  2365  038C  0008               	return
  2366  038D                     __end_of___lmul:
  2367                           
  2368                           	psect	text9
  2369  02D8                     __ptext9:	
  2370 ;; *************** function ___set_baud_rate *****************
  2371 ;; Defined at:
  2372 ;;		line 147 in file "main.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  baud_rate       4    6[BANK0 ] long 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0, pclath, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2386 ;;      Params:         0       4       0       0       0
  2387 ;;      Locals:         0       0       0       0       0
  2388 ;;      Temps:          0       0       0       0       0
  2389 ;;      Totals:         0       4       0       0       0
  2390 ;;Total ram usage:        4 bytes
  2391 ;; Hardware stack levels used: 1
  2392 ;; Hardware stack levels required when called: 1
  2393 ;; This function calls:
  2394 ;;		___aldiv
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400  02D8                     ___set_baud_rate:	
  2401                           ;psect for function ___set_baud_rate
  2402                           
  2403  02D8                     l1088:	
  2404                           ;incstack = 0
  2405                           ; Regs used in ___set_baud_rate: [wreg+status,2+status,0+pclath+cstack]
  2406                           
  2407                           
  2408                           ;main.c: 147: void __set_baud_rate(long baud_rate);main.c: 148: {;main.c: 149:     SPBRG
      +                           = (unsigned char)((16000000 / 16) / baud_rate);
  2409  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2410  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  2411  02DA  0829               	movf	___set_baud_rate@baud_rate+3,w
  2412  02DB  00F3               	movwf	___aldiv@divisor+3
  2413  02DC  0828               	movf	___set_baud_rate@baud_rate+2,w
  2414  02DD  00F2               	movwf	___aldiv@divisor+2
  2415  02DE  0827               	movf	___set_baud_rate@baud_rate+1,w
  2416  02DF  00F1               	movwf	___aldiv@divisor+1
  2417  02E0  0826               	movf	___set_baud_rate@baud_rate,w
  2418  02E1  00F0               	movwf	___aldiv@divisor
  2419  02E2  3000               	movlw	0
  2420  02E3  00F7               	movwf	___aldiv@dividend+3
  2421  02E4  300F               	movlw	15
  2422  02E5  00F6               	movwf	___aldiv@dividend+2
  2423  02E6  3042               	movlw	66
  2424  02E7  00F5               	movwf	___aldiv@dividend+1
  2425  02E8  3040               	movlw	64
  2426  02E9  00F4               	movwf	___aldiv@dividend
  2427  02EA  120A  118A  238D  120A  118A  	fcall	___aldiv
  2428  02EF  0870               	movf	?___aldiv,w
  2429  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2430  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2431  02F2  0099               	movwf	25	;volatile
  2432  02F3                     l114:
  2433  02F3  0008               	return
  2434  02F4                     __end_of___set_baud_rate:
  2435                           
  2436                           	psect	text10
  2437  038D                     __ptext10:	
  2438 ;; *************** function ___aldiv *****************
  2439 ;; Defined at:
  2440 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/aldiv.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  divisor         4    0[COMMON] long 
  2443 ;;  dividend        4    4[COMMON] long 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  quotient        4    2[BANK0 ] long 
  2446 ;;  sign            1    1[BANK0 ] unsigned char 
  2447 ;;  counter         1    0[BANK0 ] unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  4    0[COMMON] long 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2457 ;;      Params:         8       0       0       0       0
  2458 ;;      Locals:         0       6       0       0       0
  2459 ;;      Temps:          1       0       0       0       0
  2460 ;;      Totals:         9       6       0       0       0
  2461 ;;Total ram usage:       15 bytes
  2462 ;; Hardware stack levels used: 1
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		___set_baud_rate
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470  038D                     ___aldiv:	
  2471                           ;psect for function ___aldiv
  2472                           
  2473  038D                     l1036:	
  2474                           ;incstack = 0
  2475                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2476                           
  2477  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2478  038E  1303               	bcf	3,6	;RP1=0, select bank0
  2479  038F  01A1               	clrf	___aldiv@sign
  2480  0390                     l1038:
  2481  0390  1FF3               	btfss	___aldiv@divisor+3,7
  2482  0391  2B93               	goto	u991
  2483  0392  2B94               	goto	u990
  2484  0393                     u991:
  2485  0393  2BA1               	goto	l296
  2486  0394                     u990:
  2487  0394                     l1040:
  2488  0394  09F0               	comf	___aldiv@divisor,f
  2489  0395  09F1               	comf	___aldiv@divisor+1,f
  2490  0396  09F2               	comf	___aldiv@divisor+2,f
  2491  0397  09F3               	comf	___aldiv@divisor+3,f
  2492  0398  0AF0               	incf	___aldiv@divisor,f
  2493  0399  1903               	skipnz
  2494  039A  0AF1               	incf	___aldiv@divisor+1,f
  2495  039B  1903               	skipnz
  2496  039C  0AF2               	incf	___aldiv@divisor+2,f
  2497  039D  1903               	skipnz
  2498  039E  0AF3               	incf	___aldiv@divisor+3,f
  2499  039F  01A1               	clrf	___aldiv@sign
  2500  03A0  0AA1               	incf	___aldiv@sign,f
  2501  03A1                     l296:
  2502  03A1  1FF7               	btfss	___aldiv@dividend+3,7
  2503  03A2  2BA4               	goto	u1001
  2504  03A3  2BA5               	goto	u1000
  2505  03A4                     u1001:
  2506  03A4  2BB4               	goto	l1046
  2507  03A5                     u1000:
  2508  03A5                     l1042:
  2509  03A5  09F4               	comf	___aldiv@dividend,f
  2510  03A6  09F5               	comf	___aldiv@dividend+1,f
  2511  03A7  09F6               	comf	___aldiv@dividend+2,f
  2512  03A8  09F7               	comf	___aldiv@dividend+3,f
  2513  03A9  0AF4               	incf	___aldiv@dividend,f
  2514  03AA  1903               	skipnz
  2515  03AB  0AF5               	incf	___aldiv@dividend+1,f
  2516  03AC  1903               	skipnz
  2517  03AD  0AF6               	incf	___aldiv@dividend+2,f
  2518  03AE  1903               	skipnz
  2519  03AF  0AF7               	incf	___aldiv@dividend+3,f
  2520  03B0                     l1044:
  2521  03B0  3001               	movlw	1
  2522  03B1  00F8               	movwf	??___aldiv
  2523  03B2  0878               	movf	??___aldiv,w
  2524  03B3  06A1               	xorwf	___aldiv@sign,f
  2525  03B4                     l1046:
  2526  03B4  3000               	movlw	0
  2527  03B5  00A5               	movwf	___aldiv@quotient+3
  2528  03B6  3000               	movlw	0
  2529  03B7  00A4               	movwf	___aldiv@quotient+2
  2530  03B8  3000               	movlw	0
  2531  03B9  00A3               	movwf	___aldiv@quotient+1
  2532  03BA  3000               	movlw	0
  2533  03BB  00A2               	movwf	___aldiv@quotient
  2534  03BC                     l1048:
  2535  03BC  0873               	movf	___aldiv@divisor+3,w
  2536  03BD  0472               	iorwf	___aldiv@divisor+2,w
  2537  03BE  0471               	iorwf	___aldiv@divisor+1,w
  2538  03BF  0470               	iorwf	___aldiv@divisor,w
  2539  03C0  1903               	skipnz
  2540  03C1  2BC3               	goto	u1011
  2541  03C2  2BC4               	goto	u1010
  2542  03C3                     u1011:
  2543  03C3  2C11               	goto	l1068
  2544  03C4                     u1010:
  2545  03C4                     l1050:
  2546  03C4  01A0               	clrf	___aldiv@counter
  2547  03C5  0AA0               	incf	___aldiv@counter,f
  2548  03C6  2BD4               	goto	l1054
  2549  03C7                     l1052:
  2550  03C7  3001               	movlw	1
  2551  03C8  00F8               	movwf	??___aldiv
  2552  03C9                     u1025:
  2553  03C9  1003               	clrc
  2554  03CA  0DF0               	rlf	___aldiv@divisor,f
  2555  03CB  0DF1               	rlf	___aldiv@divisor+1,f
  2556  03CC  0DF2               	rlf	___aldiv@divisor+2,f
  2557  03CD  0DF3               	rlf	___aldiv@divisor+3,f
  2558  03CE  0BF8               	decfsz	??___aldiv,f
  2559  03CF  2BC9               	goto	u1025
  2560  03D0  3001               	movlw	1
  2561  03D1  00F8               	movwf	??___aldiv
  2562  03D2  0878               	movf	??___aldiv,w
  2563  03D3  07A0               	addwf	___aldiv@counter,f
  2564  03D4                     l1054:
  2565  03D4  1FF3               	btfss	___aldiv@divisor+3,7
  2566  03D5  2BD7               	goto	u1031
  2567  03D6  2BD8               	goto	u1030
  2568  03D7                     u1031:
  2569  03D7  2BC7               	goto	l1052
  2570  03D8                     u1030:
  2571  03D8                     l1056:
  2572  03D8  3001               	movlw	1
  2573  03D9  00F8               	movwf	??___aldiv
  2574  03DA                     u1045:
  2575  03DA  1003               	clrc
  2576  03DB  0DA2               	rlf	___aldiv@quotient,f
  2577  03DC  0DA3               	rlf	___aldiv@quotient+1,f
  2578  03DD  0DA4               	rlf	___aldiv@quotient+2,f
  2579  03DE  0DA5               	rlf	___aldiv@quotient+3,f
  2580  03DF  0BF8               	decfsz	??___aldiv,f
  2581  03E0  2BDA               	goto	u1045
  2582  03E1                     l1058:
  2583  03E1  0873               	movf	___aldiv@divisor+3,w
  2584  03E2  0277               	subwf	___aldiv@dividend+3,w
  2585  03E3  1D03               	skipz
  2586  03E4  2BEF               	goto	u1055
  2587  03E5  0872               	movf	___aldiv@divisor+2,w
  2588  03E6  0276               	subwf	___aldiv@dividend+2,w
  2589  03E7  1D03               	skipz
  2590  03E8  2BEF               	goto	u1055
  2591  03E9  0871               	movf	___aldiv@divisor+1,w
  2592  03EA  0275               	subwf	___aldiv@dividend+1,w
  2593  03EB  1D03               	skipz
  2594  03EC  2BEF               	goto	u1055
  2595  03ED  0870               	movf	___aldiv@divisor,w
  2596  03EE  0274               	subwf	___aldiv@dividend,w
  2597  03EF                     u1055:
  2598  03EF  1C03               	skipc
  2599  03F0  2BF2               	goto	u1051
  2600  03F1  2BF3               	goto	u1050
  2601  03F2                     u1051:
  2602  03F2  2C02               	goto	l1064
  2603  03F3                     u1050:
  2604  03F3                     l1060:
  2605  03F3  0870               	movf	___aldiv@divisor,w
  2606  03F4  02F4               	subwf	___aldiv@dividend,f
  2607  03F5  0871               	movf	___aldiv@divisor+1,w
  2608  03F6  1C03               	skipc
  2609  03F7  0F71               	incfsz	___aldiv@divisor+1,w
  2610  03F8  02F5               	subwf	___aldiv@dividend+1,f
  2611  03F9  0872               	movf	___aldiv@divisor+2,w
  2612  03FA  1C03               	skipc
  2613  03FB  0F72               	incfsz	___aldiv@divisor+2,w
  2614  03FC  02F6               	subwf	___aldiv@dividend+2,f
  2615  03FD  0873               	movf	___aldiv@divisor+3,w
  2616  03FE  1C03               	skipc
  2617  03FF  0F73               	incfsz	___aldiv@divisor+3,w
  2618  0400  02F7               	subwf	___aldiv@dividend+3,f
  2619  0401                     l1062:
  2620  0401  1422               	bsf	___aldiv@quotient,0
  2621  0402                     l1064:
  2622  0402  3001               	movlw	1
  2623  0403                     u1065:
  2624  0403  1003               	clrc
  2625  0404  0CF3               	rrf	___aldiv@divisor+3,f
  2626  0405  0CF2               	rrf	___aldiv@divisor+2,f
  2627  0406  0CF1               	rrf	___aldiv@divisor+1,f
  2628  0407  0CF0               	rrf	___aldiv@divisor,f
  2629  0408  3EFF               	addlw	-1
  2630  0409  1D03               	skipz
  2631  040A  2C03               	goto	u1065
  2632  040B                     l1066:
  2633  040B  3001               	movlw	1
  2634  040C  02A0               	subwf	___aldiv@counter,f
  2635  040D  1D03               	btfss	3,2
  2636  040E  2C10               	goto	u1071
  2637  040F  2C11               	goto	u1070
  2638  0410                     u1071:
  2639  0410  2BD8               	goto	l1056
  2640  0411                     u1070:
  2641  0411                     l1068:
  2642  0411  0821               	movf	___aldiv@sign,w
  2643  0412  1903               	btfsc	3,2
  2644  0413  2C15               	goto	u1081
  2645  0414  2C16               	goto	u1080
  2646  0415                     u1081:
  2647  0415  2C21               	goto	l1072
  2648  0416                     u1080:
  2649  0416                     l1070:
  2650  0416  09A2               	comf	___aldiv@quotient,f
  2651  0417  09A3               	comf	___aldiv@quotient+1,f
  2652  0418  09A4               	comf	___aldiv@quotient+2,f
  2653  0419  09A5               	comf	___aldiv@quotient+3,f
  2654  041A  0AA2               	incf	___aldiv@quotient,f
  2655  041B  1903               	skipnz
  2656  041C  0AA3               	incf	___aldiv@quotient+1,f
  2657  041D  1903               	skipnz
  2658  041E  0AA4               	incf	___aldiv@quotient+2,f
  2659  041F  1903               	skipnz
  2660  0420  0AA5               	incf	___aldiv@quotient+3,f
  2661  0421                     l1072:
  2662  0421  0825               	movf	___aldiv@quotient+3,w
  2663  0422  00F3               	movwf	?___aldiv+3
  2664  0423  0824               	movf	___aldiv@quotient+2,w
  2665  0424  00F2               	movwf	?___aldiv+2
  2666  0425  0823               	movf	___aldiv@quotient+1,w
  2667  0426  00F1               	movwf	?___aldiv+1
  2668  0427  0822               	movf	___aldiv@quotient,w
  2669  0428  00F0               	movwf	?___aldiv
  2670  0429                     l306:
  2671  0429  0008               	return
  2672  042A                     __end_of___aldiv:
  2673  007E                     btemp	set	126	;btemp
  2674  007E                     wtemp0	set	126
  2675                           
  2676                           	psect	idloc
  2677                           
  2678                           ;Config register IDLOC0 @ 0x2000
  2679                           ;	unspecified, using default values
  2680  2000                     	org	8192
  2681  2000  3FFF               	dw	16383
  2682                           
  2683                           ;Config register IDLOC1 @ 0x2001
  2684                           ;	unspecified, using default values
  2685  2001                     	org	8193
  2686  2001  3FFF               	dw	16383
  2687                           
  2688                           ;Config register IDLOC2 @ 0x2002
  2689                           ;	unspecified, using default values
  2690  2002                     	org	8194
  2691  2002  3FFF               	dw	16383
  2692                           
  2693                           ;Config register IDLOC3 @ 0x2003
  2694                           ;	unspecified, using default values
  2695  2003                     	org	8195
  2696  2003  3FFF               	dw	16383
  2697                           
  2698                           	psect	config
  2699                           
  2700                           ;Config register CONFIG @ 0x2007
  2701                           ;	Oscillator Selection bits
  2702                           ;	FOSC = HS, HS oscillator
  2703                           ;	Watchdog Timer Enable bit
  2704                           ;	WDTE = ON, WDT enabled
  2705                           ;	Power-up Timer Enable bit
  2706                           ;	PWRTE = OFF, PWRT disabled
  2707                           ;	Brown-out Reset Enable bit
  2708                           ;	BOREN = ON, BOR enabled
  2709                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2710                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2711                           ;	Data EEPROM Memory Code Protection bit
  2712                           ;	CPD = OFF, Data EEPROM code protection off
  2713                           ;	Flash Program Memory Write Enable bits
  2714                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2715                           ;	In-Circuit Debugger Mode bit
  2716                           ;	DEBUG = 0x1, unprogrammed default
  2717                           ;	Flash Program Memory Code Protection bit
  2718                           ;	CP = OFF, Code protection off
  2719  2007                     	org	8199
  2720  2007  3FFE               	dw	16382

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     20      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    atol@s	PTR const unsigned char  size(1) Largest target is 8
		 -> RxBuff(BANK0[8]), 

    getString@input	PTR unsigned char  size(1) Largest target is 8
		 -> RxBuff(BANK0[8]), 


Critical Paths under _main in COMMON

    _atol->___lmul
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK0

    _main->_atol
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1638
                                             15 BANK0      5     5      0
                    ___set_baud_rate
                               _atol
                            _cleanRx
                            _flushRx
                          _getString
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getString                                            7     5      2     243
                                              0 COMMON     7     5      2
                              _getch
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flushRx                                              1     1      0       2
 ---------------------------------------------------------------------------------
 (1) _cleanRx                                              2     2      0      90
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _atol                                                15    11      4     731
                                              0 BANK0     15    11      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___set_baud_rate                                      4     0      4     550
                                              6 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___set_baud_rate
     ___aldiv
   _atol
     ___lmul
     _isdigit
   _cleanRx
   _flushRx
   _getString
     _getch
   _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     14      30       5       60.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D      12        0.0%
ABS                  0      0      3D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu May 22 17:57:50 2025

                        _i 0034                          pc 0002                         l93 050B  
                       l97 065D                         fsr 0004                        l120 02B2  
                      l114 02F3                        l123 0291                        l132 028E  
                      l124 0290                        l141 033C                        l117 02A8  
                      l126 0298                        l118 02A7                        l145 0346  
                      l306 0429                        l138 0317                        l245 038C  
                      l296 03A1                        l684 042D                        l693 04CD  
                      l698 02C4                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        _RC0 0038                        _RC1 0039  
                      _RB4 0034                        _RC2 003A                        _RB5 0035  
                      _RE0 0048                        _RC5 003D                        _RE2 004A  
                      _PS0 0408                        _PS1 0409                        _PS2 040A  
                      _PSA 040B                        u930 0297                        u931 0296  
                      u940 0353                        u941 0352                        u951 035C  
                      u952 0363                        u953 036A                        u980 0384  
                      u981 0383                        u965 036C                        u990 0394  
                      u991 0393                        u975 0374                        fsr0 0004  
                      indf 0000                       l1100 032A                       l1030 0373  
                     l1022 0347                       l1040 0394                       l1032 0384  
                     l1024 034F                       l1112 02F6                       l1016 028F  
                     l1104 0336                       l1120 02A6                       l1200 0528  
                     l1050 03C4                       l1042 03A5                       l1026 0353  
                     l1130 043E                       l1114 0300                       l1106 02F4  
                     l1018 0297                       l1122 02AE                       l1210 056C  
                     l1202 052A                       l1060 03F3                       l1052 03C7  
                     l1044 03B0                       l1036 038D                       l1028 036A  
                     l1140 0457                       l1132 0444                       l1124 042D  
                     l1116 0304                       l1220 05F3                       l1212 0587  
                     l1204 0533                       l1070 0416                       l1062 0401  
                     l1054 03D4                       l1046 03B4                       l1038 0390  
                     l1150 046A                       l1142 045E                       l1134 044C  
                     l1126 0434                       l1118 030A                       l1222 060E  
                     l1214 05A2                       l1206 0536                       l1230 0646  
                     l1072 0421                       l1064 0402                       l1056 03D8  
                     l1048 03BC                       l1080 02BB                       l1160 04B5  
                     l1144 0463                       l1136 044D                       l1128 0438  
                     l1240 0692                       l1224 0629                       l1216 05BD  
                     l1208 0551                       l1232 065E                       l1066 040B  
                     l1058 03E1                       l1082 02C1                       l1138 0453  
                     l1090 0285                       l1250 0719                       l1242 06AD  
                     l1234 0664                       l1226 062D                       l1218 05D8  
                     l1170 04DD                       l1068 0411                       l1084 02C3  
                     l1076 02B4                       l1164 04C5                       l1156 04A4  
                     l1092 0286                       l1252 0734                       l1244 06C8  
                     l1236 0674                       l1260 0777                       l1228 0636  
                     l1180 04FD                       l1172 04E1                       l1078 02B5  
                     l1158 04AE                       l1094 0288                       l1270 07BB  
                     l1262 077D                       l1254 074F                       l1246 06E3  
                     l1238 0677                       l1190 050A                       l1182 0501  
                     l1174 04E8                       l1088 02D8                       l1096 0319  
                     l1272 07CC                       l1264 0786                       l1256 076A  
                     l1248 06FE                       l1192 050C                       l1184 0505  
                     l1176 04EB                       l1168 04CE                       l1098 031C  
                     l1274 07D2                       l1266 079E                       l1258 076E  
                     l1194 0511                       l1186 0508                       l1178 04EE  
                     l1268 07B5                       l1196 051B                       l1188 0509  
                     l1198 0520             getString@input 0074                       u1000 03A5  
                     u1001 03A4                       u1010 03C4                       u1011 03C3  
                     u1100 02C1                       u1101 02C0                       u1030 03D8  
                     u1110 028E                       u1031 03D7                       u1111 028D  
                     u1200 0469                       u1120 0335                       u1025 03C9  
                     u1201 0468                       u1121 0334                       u1050 03F3  
                     u1210 0490                       u1130 0346                       u1051 03F2  
                     u1211 0491                       u1131 0345                       u1220 04AE  
                     u1212 0496                       u1140 0300                       u1045 03DA  
                     u1221 04AD                       u1213 0497                       u1141 02FF  
                     u1070 0411                       u1230 04B5                       u1150 0317  
                     u1310 057B                       u1071 0410                       u1055 03EF  
                     u1231 04B4                       u1151 0316                       u1135 0342  
                     u1080 0416                       u1160 02AE                       u1400 05CC  
                     u1320 0584                       u1304 056C                       u1240 0528  
                     u1081 0415                       u1065 0403                       u1161 02AD  
                     u1321 0580                       u1241 0527                       u1090 02BB  
                     u1170 043E                       u1410 05D5                       u1250 0545  
                     u1091 02BA                       u1171 043D                       u1155 0313  
                     u1411 05D1                       u1315 0576                       u1180 0444  
                     u1500 0626                       u1340 0596                       u1260 054E  
                     u1181 0443                       u1501 0622                       u1405 05C7  
                     u1261 054A                       u1190 0453                       u1430 05E7  
                     u1350 059F                       u1334 0587                       u1191 0452  
                     u1351 059B                       u1255 0540                       u1600 06BC  
                     u1520 065C                       u1440 05F0                       u1424 05D8  
                     u1280 0560                       u1521 065B                       u1441 05EC  
                     u1345 0591                       u1610 06C5                       u1530 0664  
                     u1514 0629                       u1370 05B1                       u1290 0569  
                     u1274 0551                       u1611 06C1                       u1531 0663  
                     u1523 0658                       u1435 05E2                       u1291 0565  
                     u1700 0716                       u1540 0686                       u1460 0602  
                     u1380 05BA                       u1364 05A2                       u1701 0712  
                     u1605 06B7                       u1381 05B6                       u1285 055B  
                     u1630 06D7                       u1550 068F                       u1470 060B  
                     u1454 05F3                       u1551 068B                       u1471 0607  
                     u1375 05AC                       u1720 0728                       u1640 06E0  
                     u1624 06C8                       u1641 06DC                       u1545 0681  
                     u1465 05FD                       u1810 077D                       u1730 0731  
                     u1714 0719                       u1570 06A1                       u1490 061D  
                     u1394 05BD                       u1811 077C                       u1731 072D  
                     u1635 06D2                       u1820 07B4                       u1804 076A  
                     u1660 06F2                       u1580 06AA                       u1564 0692  
                     u1484 060E                       u1821 07B3                       u1725 0723  
                     u1581 06A6                       u1830 07BB                       u1750 0743  
                     u1670 06FB                       u1654 06E3                       u1831 07BA  
                     u1823 07B0                       u1671 06F7                       u1575 069C  
                     u1495 0618                       u1840 07D2                       u1760 074C  
                     u1744 0734                       u1841 07D1                       u1761 0748  
                     u1665 06ED                       u1690 070D                       u1594 06AD  
                     u1755 073E                       u1780 075E                       u1684 06FE  
                     u1790 0767                       u1774 074F                       u1791 0763  
                     u1695 0708                       u1857 078A                       u1785 0759  
                     _RCIF 0065                       _TRMT 04C1                       _atol 042A  
                     _main 04CE                       btemp 007E                       start 0000  
          __end_of___aldiv 042A                      ?_atol 0020            getString@length 0070  
                    ?_main 0070                      _RCREG 001A                      _RCSTA 0018  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _PORTE 0009  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      _TXREG 0019  
                    _TXSTA 0098            __end_of_cleanRx 0318        ___lmul@multiplicand 0074  
                    _getch 028F            __end_of_flushRx 028F            __end_of_isdigit 02C5  
                    atol@a 0029                      atol@c 002E                      atol@s 002D  
                    _putch 02A5                      pclath 000A                      status 0003  
                    wtemp0 007E           ?___set_baud_rate 0026            __initialization 07E6  
             __end_of_atol 04CE               __end_of_main 07E6                     ??_atol 0024  
                   ??_main 002F                     ?_getch 0070                     ?_putch 0070  
                   _RxBuff 003C                     _TxBuff 0044                     ___lmul 0347  
                ??___aldiv 0078                  ??_cleanRx 0070                  ??_flushRx 0070  
                ??_isdigit 0070  ___set_baud_rate@baud_rate 0026    __end_of__initialization 07FC  
           __pcstackCOMMON 0070               __pidataBANK0 0299              __end_of_getch 0299  
            __end_of_putch 02B3                    ??_getch 0070                    ??_putch 0070  
               __pbssBANK0 0034                 __pmaintext 04CE                    ?___lmul 0070  
           ___lmul@product 0079                    _MaxAddr 004C                    _MinAddr 0038  
        __end_of_getString 0347                    ___aldiv 038D                    _cleanRx 02F4  
                  __ptext1 02A5                    __ptext2 0318                    __ptext3 028F  
                  __ptext4 0285                    __ptext5 02F4                    __ptext6 042A  
                  __ptext7 02B3                    __ptext8 0347                    __ptext9 02D8  
                  _flushRx 0285                    _isdigit 02B3           ___aldiv@dividend 0074  
                  clrloop0 027E       end_of_initialization 07FC           ___aldiv@quotient 0022  
               getString@i 0075             __end_of___lmul 038D        start_initialization 07E6  
                 ??___lmul 0078                 init_fetch0 02C5                __pdataBANK0 0044  
                ___latbits 0002              __pcstackBANK0 0020          ??___set_baud_rate 0079  
                 ?___aldiv 0070                  _getString 0318                   ?_cleanRx 0070  
                 ?_flushRx 0070                   ?_isdigit 0070            ___aldiv@divisor 0070  
          ___aldiv@counter 0020                  clear_ram0 027D                 ?_getString 0070  
        ___lmul@multiplier 0070                _isdigit$566 0070                   __ptext10 038D  
                 cleanRx@i 0070                   atol@sign 0028            ___set_baud_rate 02D8  
              ??_getString 0072                  putch@data 0070                   init_ram0 02C9  
                 isdigit@c 0071               ___aldiv@sign 0021    __end_of___set_baud_rate 02F4  
